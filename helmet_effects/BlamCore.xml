<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlamCore</name>
    </assembly>
    <members>
        <member name="T:BlamCore.Analysis.ITagElementGuess">
            <summary>
            Interface for a tag element guess.
            </summary>
        </member>
        <member name="P:BlamCore.Analysis.ITagElementGuess.Size">
            <summary>
            Gets the size of the tag element in bytes.
            </summary>
        </member>
        <member name="M:BlamCore.Analysis.ITagElementGuess.Merge(BlamCore.Analysis.ITagElementGuess)">
            <summary>
            Merges this guess with another one.
            </summary>
            <param name="other">The guess to merge with.</param>
            <returns><c>true</c> if the merge was successful.</returns>
        </member>
        <member name="M:BlamCore.Analysis.ITagElementGuess.Accept(System.UInt32,BlamCore.Analysis.ITagElementGuessVisitor)">
            <summary>
            Dispatches this guess to a visitor object.
            </summary>
            <param name="offset">The element offset to pass to the visitor.</param>
            <param name="visitor">The visitor object.</param>
        </member>
        <member name="T:BlamCore.Analysis.ITagElementGuessVisitor">
            <summary>
            Interface for a class which can visit tag element guesses.
            </summary>
        </member>
        <member name="T:BlamCore.Analysis.LayoutGuessFinalizer">
            <summary>
            Converts tag layout guesses into final layouts.
            </summary>
        </member>
        <member name="M:BlamCore.Analysis.LayoutGuessFinalizer.MakeLayout(BlamCore.Analysis.TagLayoutGuess,System.String,BlamCore.Common.Tag)">
            <summary>
            Makes a layout from a layout guess.
            </summary>
            <param name="layout">The layout guess.</param>
            <param name="name">The name of the final layout.</param>
            <param name="groupTag">The group tag of the final layout. Can be <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Analysis.TagAnalyzer.BuildTagMap(BlamCore.Cache.CachedTagData)">
            <summary>
            Builds a memory map for a tag.
            </summary>
            <param name="data">The tag data to build a memory map for.</param>
            <returns>The built map.</returns>
        </member>
        <member name="P:BlamCore.Analysis.TagBlockGuess.ElementLayout">
            <summary>
            Gets the layout of each element in the tag block.
            </summary>
        </member>
        <member name="T:BlamCore.Analysis.TagLayoutGuess">
            <summary>
            A guess at the layout of a tag.
            </summary>
        </member>
        <member name="P:BlamCore.Analysis.TagLayoutGuess.Size">
            <summary>
            Gets the size of the layout in bytes.
            </summary>
        </member>
        <member name="M:BlamCore.Analysis.TagLayoutGuess.Add(System.UInt32,BlamCore.Analysis.ITagElementGuess)">
            <summary>
            Adds a guess to the layout.
            </summary>
            <param name="offset">The offset of the guess from the beginning of the layout.</param>
            <param name="guess">The guess to add.</param>
        </member>
        <member name="M:BlamCore.Analysis.TagLayoutGuess.Merge(BlamCore.Analysis.TagLayoutGuess)">
            <summary>
            Merges another layout into this one.
            </summary>
            <param name="otherLayout">The layout to merge with.</param>
        </member>
        <member name="M:BlamCore.Analysis.TagLayoutGuess.TryGet(System.UInt32)">
            <summary>
            Tries to get the guess at an offset.
            </summary>
            <param name="offset">The offset to get the guess at.</param>
            <returns>The guess if one exists, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Analysis.TagLayoutGuess.Accept(BlamCore.Analysis.ITagElementGuessVisitor)">
            <summary>
            Dispatches each guess in the layout to a visitor object.
            </summary>
            <param name="visitor">The visitor object.</param>
        </member>
        <member name="T:BlamCore.Bitmaps.BitmapFlags">
            <summary>
            Bitmap flags.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapFlags.Compressed">
            <summary>
            The texture is in a "compressed" format (DXT, DXN, etc.).
            Its width and height must be rounded up to multiples of 4 on load.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.BitmapFormat">
            <summary>
            Bitmap data formats.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.BitmapIsTiled">
            <summary>
            Affects how height maps are converted to bump maps
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.UseLessBlurryBumpMap">
            <summary>
            Uses a sharper (and noisier) method of calculating bump maps from height maps
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.DitherWhenCompressing">
            <summary>
            Lets the compressor use dithering
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.GenerateRandomSprites">
            <summary>
            Repopulates the manual sequences with random sprites upon reimport
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.UsingTagInteropAndTagResource">
            <summary>
            FOR INTERNAL USE ONLY - DO NOT MODIFY
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.IgnoreAlphaChannel">
            <summary>
            If you have an alpha channel but do not care about it, set this flag
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.AlphaChannelStoresTransparency">
            <summary>
            If your alpha channel represents transparency (alpha blend or alpha-test only),
            set this bit to stop color bleeding on edges
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.PreserveAlphaChannelInMipmapsForAlphaTest">
            <summary>
            This will artificially thicken the alpha channel in mip maps, which can keep your
            bitmap from disappearing in the distance when you are using alpha test
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.OnlyUseOnDemand">
            <summary>
            This bitmap will always be demand loaded, only supported by UI
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.GenerateTightBounds">
            <summary>
            Generate a polygonal bounding box around the non-empty pixels to save fill rate cost
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.TightBoundsFromAlphaChannel">
            <summary>
            Unchecked, tight bounds are generated from the color channel
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.DoNotGenerateRequiredSection">
            <summary>
            Bitmap will have data split between medium and low optional sections
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.ApplyMaxResolutionAfterSlicing">
            <summary>
            Allows use of "max resolution" on bitmaps that have multiple frames, but may be buggy...?
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.GenerateBlackPointTightBounds">
            <summary>
            Generate a set of polygonal bounding boxes for various alpha black points
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.BitmapRuntimeFlags.PreFilterCubemaps">
            <summary>
            Apply cosine power-weighted cone filter to entire cubemap instead of filtering each face as separate 2D image
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.BitmapType">
            <summary>
            Bitmap types.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsHeader">
            <summary>
            Represents the header of a DirectDraw Surface (DDS) file.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.Width">
            <summary>
            The width of the texture in pixels.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.Height">
            <summary>
            The height of the texture in pixels.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.Pitch">
            <summary>
            For uncompressed textures, gets or sets the pitch of the texture in bytes. Can be 0.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.LinearSize">
            <summary>
            For compressed textures, gets or sets the total size of the texture in bytes. Can be 0.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.Depth">
            <summary>
            The depth of the texture in pixels. Can be 0 or 1 for non-volumetric textures.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.MipMapCount">
            <summary>
            The number of mipmaps that the texture has. Can be 0 or 1 for non-mipmapped textures.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.Reserved">
            <summary>
            The reserved information to store in the file header.
            Must be exactly 44 bytes large.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.FormatType">
            <summary>
            The type of the texture's format.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.FourCc">
            <summary>
            The FourCC for the texture's format. Can be 0.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.BitsPerPixel">
            <summary>
            The number of bits per pixel.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.RBitMask">
            <summary>
            The R channel bitmask.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.GBitMask">
            <summary>
            The G channel bit mask.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.BBitMask">
            <summary>
            The B channel bit mask.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.ABitMask">
            <summary>
            The A channel bit mask.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.SurfaceComplexityFlags">
            <summary>
            The surface complexity flags.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.SurfaceInfoFlags">
            <summary>
            The surface info flags.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.D3D10Format">
            <summary>
            The D3D10 format.
            Can be <see cref="F:BlamCore.Bitmaps.DxgiFormat.Unknown"/> if D3D10 extensions are disabled.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.D3D10Dimension">
            <summary>
            The D3D10 dimension of the resource.
            Only valid if <see cref="P:BlamCore.Bitmaps.DdsHeader.D3D10Format"/> is not <see cref="F:BlamCore.Bitmaps.DxgiFormat.Unknown"/>.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.D3D10MiscFlags">
            <summary>
            The D3D10 misc flags.
            Only valid if <see cref="P:BlamCore.Bitmaps.DdsHeader.D3D10Format"/> is not <see cref="F:BlamCore.Bitmaps.DxgiFormat.Unknown"/>.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.D3D10ArraySize">
            <summary>
            For 2D textures that are also cubemaps, gets and sets the number of cubes.
            For 3D textures, this must be 1.
            Only valid if <see cref="P:BlamCore.Bitmaps.DdsHeader.D3D10Format"/> is not <see cref="F:BlamCore.Bitmaps.DxgiFormat.Unknown"/>.
            </summary>
        </member>
        <member name="P:BlamCore.Bitmaps.DdsHeader.D3D10AlphaMode">
            <summary>
            The D3D10 alpha blending mode.
            Only valid if <see cref="P:BlamCore.Bitmaps.DdsHeader.D3D10Format"/> is not <see cref="F:BlamCore.Bitmaps.DxgiFormat.Unknown"/>.
            </summary>
        </member>
        <member name="M:BlamCore.Bitmaps.DdsHeader.Read(System.IO.Stream)">
            <summary>
            Reads a DDS header from a stream. On return, the stream will be positioned at the beginning of the texture data.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The header that was read.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the DDS header is invalid.</exception>
        </member>
        <member name="M:BlamCore.Bitmaps.DdsHeader.WriteTo(System.IO.Stream)">
            <summary>
            Writes the DDS header to a stream. On return, the stream will be positioned where the texture data should go.
            </summary>
            <param name="stream">The stream to write to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an error occurs while saving.</exception>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsHeader.DdsFlags">
            <summary>
            Flags listing which features a DDS file supports.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsHeader.DdsFormatFlags">
            <summary>
            Flags containing information about a DDS file's format.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsFourCc">
            <summary>
            Utility class for DDS FourCC values.
            </summary>
        </member>
        <member name="M:BlamCore.Bitmaps.DdsFourCc.FromString(System.String)">
            <summary>
            Creates a FourCC value from a string.
            </summary>
            <param name="str">The string.</param>
            <returns>The FourCC value.</returns>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsSurfaceComplexityFlags">
            <summary>
            DDS surface complexity flags.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsSurfaceComplexityFlags.Complex">
            <summary>
            Indicates that the file contains more than one surface.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsSurfaceComplexityFlags.MipMap">
            <summary>
            Indicates that the file contains mipmaps.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsSurfaceComplexityFlags.Texture">
            <summary>
            Indicates that the file contains texture info. Required.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsSurfaceInfoFlags">
            <summary>
            DDS surface info flags.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.DdsFormatType">
            <summary>
            DDS format types.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsFormatType.Rgb">
            <summary>
            The texture contains RGB data.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsFormatType.Yuv">
            <summary>
            The texture contains YUV data.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsFormatType.Luminance">
            <summary>
            The texture contains luminance data.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsFormatType.Alpha">
            <summary>
            The texture only contains an alpha channel.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.DdsFormatType.Other">
            <summary>
            The format should be determined by the texture's FourCC code or the D3D10 format.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.DxgiFormat">
            <summary>
            DXGI texture formats.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.D3D10Dimension">
            <summary>
            D3D10 resource dimensions.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.D3D10MiscFlags">
            <summary>
            Miscellaneous D3D10 flags.
            </summary>
        </member>
        <member name="F:BlamCore.Bitmaps.D3D10MiscFlags.TextureCube">
            <summary>
            Indicates that a 2D texture is also a cubemap.
            </summary>
        </member>
        <member name="T:BlamCore.Bitmaps.D3D10AlphaMode">
            <summary>
            D3D10 alpha blending modes.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.CacheAddressType">
            <summary>
            Resource address types.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.CacheAddressType.Memory">
            <summary>
            The address is a memory address.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.CacheAddressType.Definition">
            <summary>
            The address points to a location in the resource definition data.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.CacheAddressType.Resource">
            <summary>
            The address points to a location in the raw resource data.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StructSerializationUtils.SerializeInstance(System.Object)">
            <summary>
            Turns an object into data in a MemoryStream.
            </summary>
            <param name="instance">The object to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.DetectFromTagCache(BlamCore.Cache.TagCache,BlamCore.Cache.CacheVersion@)">
            <summary>
            Detects the engine that a tags.dat was built for.
            </summary>
            <param name="cache">The cache file.</param>
            <param name="closestGuess">On return, the closest guess for the engine's version.</param>
            <returns>The engine version if it is known for sure, otherwise <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>.</returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.DetectFromTimestamp(System.Int64,BlamCore.Cache.CacheVersion@)">
            <summary>
            Detects the engine that a tags.dat was built for based on its timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="closestGuess">On return, the closest guess for the engine's version.</param>
            <returns>The engine version if the timestamp matched directly, otherwise <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>.</returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.GetTimestamp(BlamCore.Cache.CacheVersion)">
            <summary>
            Gets the timestamp for a version.
            </summary>
            <param name="version">The version.</param>
            <returns>The timestamp, or -1 for <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>.</returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.GetFromBuildName(System.String)">
            <summary>
            Gets the <see cref="T:BlamCore.Cache.CacheVersion"/> associated with the specified build name.
            </summary>
            <param name="buildName">The build name.</param>
            <returns>The version, or <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/> if not found.</returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.GetBuildName(BlamCore.Cache.CacheVersion)">
            <summary>
            Gets the version string corresponding to an <see cref="T:BlamCore.Cache.CacheVersion"/> value.
            </summary>
            <param name="version">The version.</param>
            <returns>The version string.</returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.Compare(BlamCore.Cache.CacheVersion,BlamCore.Cache.CacheVersion)">
            <summary>
            Compares two version numbers.
            </summary>
            <param name="lhs">The left-hand version number.</param>
            <param name="rhs">The right-hand version number.</param>
            <returns>A positive value if the left version is newer, a negative value if the right version is newer, and 0 if the versions are equivalent.</returns>
        </member>
        <member name="M:BlamCore.Cache.CacheVersionDetection.IsBetween(BlamCore.Cache.CacheVersion,BlamCore.Cache.CacheVersion,BlamCore.Cache.CacheVersion)">
            <summary>
            Determines whether a version number is between two other version numbers (inclusive).
            </summary>
            <param name="compare">The version number to compare. If this is <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>, this function will always return <c>true</c>.</param>
            <param name="min">The minimum version number. If this is <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>, then the lower bound will be ignored.</param>
            <param name="max">The maximum version number. If this is <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>, then the upper bound will be ignored.</param>
            <returns></returns>
        </member>
        <member name="F:BlamCore.Cache.CacheVersionDetection.VersionTimestamps">
            <summary>
            tags.dat timestamps for each game version.
            Timestamps in here should correspond directly to <see cref="T:BlamCore.Cache.CacheVersion"/> enum values (excluding <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/>).
            </summary>
        </member>
        <member name="T:BlamCore.Cache.D3DPointer`1">
            <summary>
            Points to a D3D-related object.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.D3DPointer`1.Definition">
            <summary>
            The definition data for the object.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.D3DPointer`1.Address">
            <summary>
            The address of the object in memory.
            This should be set to 0 because it will be filled in by the game.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.CachedTagData">
            <summary>
            Contains tag data and a description of it.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.Group">
            <summary>
            The tag data's group.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.MainStructOffset">
            <summary>
            The offset of the main structure in the tag data.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.Dependencies">
            <summary>
            Gets the indices of tags that the tag data depends on.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.PointerFixups">
            <summary>
            Gets a list of fixups for pointers in the tag data.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.ResourcePointerOffsets">
            <summary>
            Gets a list of offsets to each resource pointer in the tag data.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.Data">
            <summary>
            The serialized tag data.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.CachedTagData.PointerFixup">
            <summary>
            Contains information about a pointer in tag data that needs to be adjusted.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.PointerFixup.WriteOffset">
            <summary>
            The offset (from the start of the tag's data) of the pointer.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagData.PointerFixup.TargetOffset">
            <summary>
            The offset (from the start of the tag's data) that the pointer should point to.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.CachedTagInstance">
            <summary>
            Describes a tag in a tag cache.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.Index">
            <summary>
            Gets the tag's index.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.HeaderOffset">
            <summary>
            Gets the offset of the tag's header, or -1 if the tag is not in a file.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.TotalSize">
            <summary>
            Gets the total size of the tag (including both its header and data), or 0 if the tag is not in a file.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.Group">
            <summary>
            Gets the tag's group.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.MainStructOffset">
            <summary>
            Gets the offset of the tag's main structure from the start of its header.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.Checksum">
            <summary>
            Gets the checksum (adler32?) of the tag's data. Ignored if checksum verification is patched out.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.Dependencies">
            <summary>
            Gets the indices of tags that this tag depends on.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.PointerOffsets">
            <summary>
            Gets a list of offsets to each pointer in the tag, relative to the beginning of the tag's header.
            </summary>
            <remarks>
            This previously used offsets relative to the beginning of the tag's data.
            This was changed in order to speed up loading and be more closer to the engine.
            </remarks>
        </member>
        <member name="P:BlamCore.Cache.CachedTagInstance.ResourcePointerOffsets">
            <summary>
            Gets a list of offsets to each resource pointer in the tag, relative to the beginning of the tag's header.
            </summary>
            <remarks>
            See the remarks for <see cref="P:BlamCore.Cache.CachedTagInstance.PointerOffsets"/>.
            </remarks>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.IsInGroup(BlamCore.Common.Tag)">
            <summary>
            Determines whether the tag belongs to a tag group.
            </summary>
            <param name="groupTag">The group tag.</param>
            <returns><c>true</c> if the tag belongs to the group.</returns>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.IsInGroup(System.String)">
            <summary>
            Determines whether the tag belongs to a tag group.
            </summary>
            <param name="groupTag">A 4-character string representing the group tag, e.g. "scnr".</param>
            <returns><c>true</c> if the tag belongs to the group.</returns>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.IsInGroup(BlamCore.Common.TagGroup)">
            <summary>
            Determines whether the tag belongs to a tag group.
            </summary>
            <param name="group">The tag group.</param>
            <returns><c>true</c> if the tag belongs to the group.</returns>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.PointerToOffset(System.UInt32)">
            <summary>
            Converts a pointer to an offset relative to the tag's header.
            </summary>
            <param name="pointer">The pointer to convert.</param>
            <returns>The offset.</returns>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.OffsetToPointer(System.UInt32)">
            <summary>
            Converts an offset relative to the tag's header to a pointer.
            </summary>
            <param name="offset">The offset to convert.</param>
            <returns>The pointer.</returns>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.ReadHeader(System.IO.BinaryReader)">
            <summary>
            Reads the header for the tag instance from a stream.
            </summary>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.WriteHeader(System.IO.BinaryWriter)">
            <summary>
            Writes the header for the tag instance to a stream.
            </summary>
            <param name="writer">The stream to write to.</param>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.CalculateHeaderSize(BlamCore.Cache.CachedTagData)">
            <summary>
            Calculates the header size that would be needed for a given block of tag data.
            </summary>
            <param name="data">The descriptor to use.</param>
            <returns>The size of the tag's header.</returns>
        </member>
        <member name="M:BlamCore.Cache.CachedTagInstance.Update(BlamCore.Cache.CachedTagData,System.UInt32)">
            <summary>
            Updates the tag instance's state from a block of tag data.
            </summary>
            <param name="data">The tag data.</param>
            <param name="dataOffset">The offset of the tag data relative to the tag instance's header.</param>
        </member>
        <member name="T:BlamCore.Cache.GameCacheContext">
            <summary>
            Manages game cache file interop.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.Directory">
            <summary>
            Gets the directory of the current cache context.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.Version">
            <summary>
            Gets the engine version of the cache files.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.Serializer">
            <summary>
            The tag serializer to use.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.Deserializer">
            <summary>
            The tag deserializer to use.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.TagCacheFile">
            <summary>
            Gets the tag cache file information.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.TagNames">
            <summary>
            A dictionary of tag names.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.TagCache">
            <summary>
            The tag cache.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenTagCacheRead">
            <summary>
            Opens the tag cache file for reading.
            </summary>
            <returns>The stream that was opened.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenTagCacheWrite">
            <summary>
            Opens the tag cache file for writing.
            </summary>
            <returns>The stream that was opened.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenTagCacheReadWrite">
            <summary>
            Opens the tag cache file for reading and writing.
            </summary>
            <returns>The stream that was opened.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.GetTag(System.Int32)">
            <summary>
            Gets a tag from the tag cache.
            </summary>
            <param name="index">The index of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.LoadTagNames">
            <summary>
            Loads tag file names from the appropriate tagnames.csv file.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.StringIdCacheFile">
            <summary>
            Gets the string_id cache file information.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.StringIdCache">
            <summary>
            The stringID cache.
            Can be <c>null</c>.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenStringIdCacheRead">
            <summary>
            Opens the string_id cache file for reading.
            </summary>
            <returns>The stream that was opened.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenStringIdCacheWrite">
            <summary>
            Opens the string_id cache file for writing.
            </summary>
            <returns>The stream that was opened.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenStringIdCacheReadWrite">
            <summary>
            Opens the string_id cache file for reading and writing.
            </summary>
            <returns>The stream that was opened.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.GetString(BlamCore.Common.StringId)">
            <summary>
            Gets a string from the string_id cache.
            </summary>
            <param name="id">The id of the string.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.GetStringId(System.String)">
            <summary>
            Gets the string_id associated with the specified value from the string_id cache.
            </summary>
            <param name="value">The value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.GetStringId(System.Int32)">
            <summary>
            Gets the string_id associated with the specified index from the string_id cache.
            </summary>
            <param name="index">The index of the string.</param>
            <returns></returns>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.ResourceCacheNames">
            <summary>
            The file names associated to each <see cref="T:BlamCore.Cache.ResourceLocation"/>.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.GameCacheContext.LoadedResourceCaches">
            <summary>
            The loaded <see cref="T:BlamCore.Cache.ResourceCache"/> for each <see cref="T:BlamCore.Cache.ResourceLocation"/>.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.GetResourceCache(BlamCore.Cache.ResourceLocation)">
            <summary>
            Gets a resource cache file descriptor for the specified <see cref="T:BlamCore.Cache.ResourceLocation"/>.
            </summary>
            <param name="location">The location of the resource file.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenResourceCacheRead(BlamCore.Cache.ResourceLocation)">
            <summary>
            Opens a resource cache file for reading.
            </summary>
            <param name="location">The location of the resource file.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenResourceCacheWrite(BlamCore.Cache.ResourceLocation)">
            <summary>
            Opens a resource cache file for writing.
            </summary>
            <param name="location">The location of the resource file.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.OpenResourceCacheReadWrite(BlamCore.Cache.ResourceLocation)">
            <summary>
            Opens a resource cache file for reading and writing.
            </summary>
            <param name="location">The location of the resource file.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.LoadResourceCache(BlamCore.Cache.ResourceLocation,System.String)">
            <summary>
            Loads a resource cache from a file.
            </summary>
            <param name="location">The resource cache type.</param>
            <param name="path">The path to the .dat file to read.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the cache is already loaded.</exception>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.LoadResourceCacheFromDirectory(System.String,BlamCore.Cache.ResourceLocation)">
            <summary>
            Loads a resource cache from a directory using its default name.
            </summary>
            <param name="directory">The directory to find the cache in.</param>
            <param name="cache">The type of cache to load.</param>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.LoadResourcesCachesFromDirectory(System.String)">
            <summary>
            Loads resource caches from a directory using their default filenames.
            </summary>
            <param name="directory">The directory to find files in.</param>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.AddResource(BlamCore.Cache.ResourceReference,BlamCore.Cache.ResourceLocation,System.IO.Stream)">
            <summary>
            Adds a new resource to a cache.
            </summary>
            <param name="resource">The resource reference to initialize.</param>
            <param name="location">The location where the resource should be stored.</param>
            <param name="dataStream">The stream to read the resource data from.</param>
            <exception cref="T:System.ArgumentNullException">resource</exception>
            <exception cref="T:System.ArgumentException">The input stream is not open for reading;dataStream</exception>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.AddRawResource(BlamCore.Cache.ResourceReference,BlamCore.Cache.ResourceLocation,System.Byte[])">
            <summary>
            Adds raw, pre-compressed resource data to a cache.
            </summary>
            <param name="resource">The resource reference to initialize.</param>
            <param name="location">The location where the resource should be stored.</param>
            <param name="data">The pre-compressed data to store.</param>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.ExtractResource(BlamCore.Cache.ResourceReference,System.IO.Stream)">
            <summary>
            Extracts and decompresses the data for a resource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="outStream">The stream to write the extracted data to.</param>
            <exception cref="T:System.ArgumentException">Thrown if the output stream is not open for writing.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the file containing the resource has not been loaded.</exception>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.ExtractRawResource(BlamCore.Cache.ResourceReference)">
            <summary>
            Extracts raw, compressed resource data.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The raw, compressed resource data.</returns>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.ReplaceResource(BlamCore.Cache.ResourceReference,System.IO.Stream)">
            <summary>
            Compresses and replaces the data for a resource.
            </summary>
            <param name="resource">The resource whose data should be replaced. On success, the reference will be adjusted to account for the new data.</param>
            <param name="dataStream">The stream to read the new data from.</param>
            <exception cref="T:System.ArgumentException">Thrown if the input stream is not open for reading.</exception>
        </member>
        <member name="M:BlamCore.Cache.GameCacheContext.ReplaceRawResource(BlamCore.Cache.ResourceReference,System.Byte[])">
            <summary>
            Replaces a resource with raw, pre-compressed data.
            </summary>
            <param name="resource">The resource whose data should be replaced. On success, the reference will be adjusted to account for the new data.</param>
            <param name="data">The raw, pre-compressed data to use.</param>
        </member>
        <member name="T:BlamCore.Cache.ResourceBlockReference`1">
            <summary>
            A block reference to raw resource data. Only used in resource definitions.
            </summary>
            <remarks>
            Not to be confused with <see cref="T:BlamCore.Cache.ResourceReference"/>, which references a resource as a whole and is found in normal tag data.
            </remarks>
        </member>
        <member name="F:BlamCore.Cache.ResourceBlockReference`1.Count">
            <summary>
            The count of the referenced block.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceBlockReference`1.Address">
            <summary>
            The address of the referenced block.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.ResourceCache">
            <summary>
            A .dat file containing resource data (e.g. resources.dat).
            </summary>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.#ctor(System.IO.Stream)">
            <summary>
            Loads a resource cache from a stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="P:BlamCore.Cache.ResourceCache.Count">
            <summary>
            Gets the number of resources in the archive.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.Add(System.IO.Stream,System.Byte[],System.UInt32@)">
            <summary>
            Adds a resource to the cache.
            </summary>
            <param name="inStream">The stream open on the resource cache.</param>
            <param name="data">The data to compress.</param>
            <param name="compressedSize">On return, the size of the compressed data.</param>
            <returns>The index of the resource that was added.</returns>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.AddRaw(System.IO.Stream,System.Byte[])">
            <summary>
            Adds a raw, pre-compressed resource to the cache.
            </summary>
            <param name="inStream">The stream open on the resource cache.</param>
            <param name="rawData">The raw data to add.</param>
            <returns>The index of the resource that was added.</returns>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.ExtractRaw(System.IO.Stream,System.Int32,System.UInt32)">
            <summary>
            Extracts raw, compressed resource data.
            </summary>
            <param name="inStream">The stream open on the resource cache.</param>
            <param name="resourceIndex">The index of the resource to decompress.</param>
            <param name="compressedSize">Total size of the compressed data, including chunk headers.</param>
            <returns>The raw, compressed resource data.</returns>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.ImportRaw(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Overwrites a resource with raw, pre-compressed data.
            </summary>
            <param name="inStream">The stream open on the resource cache.</param>
            <param name="resourceIndex">The index of the resource to overwrite.</param>
            <param name="data">The raw, pre-compressed data to overwrite it with.</param>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.Decompress(System.IO.Stream,System.Int32,System.UInt32,System.IO.Stream)">
            <summary>
            Decompresses a resource.
            </summary>
            <param name="inStream">The stream open on the resource cache.</param>
            <param name="resourceIndex">The index of the resource to decompress.</param>
            <param name="compressedSize">Total size of the compressed data, including chunk headers.</param>
            <param name="outStream">The stream to write the decompressed resource data to.</param>
        </member>
        <member name="M:BlamCore.Cache.ResourceCache.Compress(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Compresses and saves data for a resource.
            </summary>
            <param name="inStream">The stream open on the resource data. It must have read/write access.</param>
            <param name="resourceIndex">The index of the resource to edit.</param>
            <param name="data">The data to compress.</param>
            <returns>The total size of the compressed resource in bytes.</returns>
        </member>
        <member name="T:BlamCore.Cache.ResourceDataReference">
            <summary>
            A data reference to raw resource data. Only used in resource definitions.
            </summary>
            <remarks>
            Not to be confused with <see cref="T:BlamCore.Cache.ResourceReference"/>, which references a resource as a whole and is found in normal tag data.
            </remarks>
        </member>
        <member name="F:BlamCore.Cache.ResourceDataReference.Size">
            <summary>
            The size of the referenced data in bytes.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceDataReference.Address">
            <summary>
            The address of the referenced data.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.ResourceReference">
            <summary>
            A reference to a resource used by a tag.
            This is treated by the serialization system as a special type of tag element.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.OldLocationFlags">
            <summary>
            Gets or sets flags containing information about where the resource is located.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.NewLocationFlags">
            <summary>
            Gets or sets flags containing information about where the resource is located.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.Index">
            <summary>
            The index of the resource within its .dat file.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.CompressedSize">
            <summary>
            The total size of the compressed resource data, including chunk headers.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.DecompressedSize">
            <summary>
            The size of the decompressed resource data.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.Checksum">
            <summary>
            The checksum of the resource data.
            Only used if <see cref="F:BlamCore.Cache.OldResourceLocationFlags.UseChecksum"/> or <see cref="F:BlamCore.Cache.OldResourceLocationFlags.UseChecksum2"/> are set.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.Owner">
            <summary>
            The tag that owns the resource.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.DefinitionData">
            <summary>
            The buffer containing the resource's definition data.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.DefinitionAddress">
            <summary>
            The address of the resource's definition structure within its definition data.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.DefinitionFixups">
            <summary>
            The fixups to apply to the definition data.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceReference.D3DObjectFixups">
            <summary>
            The D3D object fixups to apply to the definition data.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.ResourceReference.GetLocation">
            <summary>
            Gets the location of the resource by checking its location flags.
            </summary>
            <returns>The resource's location.</returns>
            <exception cref="T:System.InvalidOperationException">The resource does not have a location flag set</exception>
        </member>
        <member name="M:BlamCore.Cache.ResourceReference.ChangeLocation(BlamCore.Cache.ResourceLocation)">
            <summary>
            Changes the location of the resource by changing its location flags.
            </summary>
            <param name="newLocation">The new location.</param>
            <exception cref="T:System.ArgumentException">Unsupported resource location</exception>
        </member>
        <member name="M:BlamCore.Cache.ResourceReference.DisableChecksum">
            <summary>
            Disables the resource's checksum by changing its location flags.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.ResourceDefinitionFixup">
            <summary>
            A fixup which is applied to a resource's definition data.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceDefinitionFixup.DefinitionDataOffset">
            <summary>
            The offset from the start of the definition data where the address should be written.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceDefinitionFixup.Address">
            <summary>
            The address which the value in the definition data should point to.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.D3DObjectFixup">
            <summary>
            A fixup applied to a resource definition's data which indicates to load a D3D object.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.D3DObjectFixup.Address">
            <summary>
            The address of the object's definition.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.D3DObjectFixup.Type">
            <summary>
            The type of object to load.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.OldResourceLocationFlags">
            <summary>
            Flags related to the location and storage of the resource data.
            Only for 1.106708.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.UseChecksum">
            <summary>
            Indicates that the resource's checksum should be validated.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.InResources">
            <summary>
            Indicates that the resource is in resources.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.InTextures">
            <summary>
            Indicates that the resource is in textures.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.InTexturesB">
            <summary>
            Indicates that the resource is in textures_b.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.InAudio">
            <summary>
            Indicates that the resource is in audio.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.InVideo">
            <summary>
            Indicates that the resource is in video.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.UseChecksum2">
            <summary>
            Indicates that the resource's checksum should be validated.
            Alternate flag for <see cref="F:BlamCore.Cache.OldResourceLocationFlags.UseChecksum"/>.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.OldResourceLocationFlags.LocationMask">
            <summary>
            Mask for the location part of the flags.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.NewResourceLocationFlags">
            <summary>
            Flags related to the location and storage of the resource data.
            Only for versions 1.235640 and newer.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.UseChecksum">
            <summary>
            Indicates that the resource's checksum should be validated.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InResources">
            <summary>
            Indicates that the resource is in resources.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InTextures">
            <summary>
            Indicates that the resource is in textures.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InTexturesB">
            <summary>
            Indicates that the resource is in textures_b.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InAudio">
            <summary>
            Indicates that the resource is in audio.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InVideo">
            <summary>
            Indicates that the resource is in video.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InRenderModels">
            <summary>
            Indicates that the resource is in render_models.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.InLightmaps">
            <summary>
            Indicates that the resource is in lightmaps.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.NewResourceLocationFlags.LocationMask">
            <summary>
            Mask for the location part of the flags.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.ResourceLocation">
            <summary>
            Resource location constants used by <see cref="M:BlamCore.Cache.ResourceReference.GetLocation"/>.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.Resources">
            <summary>
            The resource is in resources.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.Textures">
            <summary>
            The resource is in textures.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.TexturesB">
            <summary>
            The resource is in textures_b.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.Audio">
            <summary>
            The resource is in audio.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.Video">
            <summary>
            The resource is in video.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.RenderModels">
            <summary>
            The resource is in render_models.dat.
            </summary>
        </member>
        <member name="F:BlamCore.Cache.ResourceLocation.Lightmaps">
            <summary>
            The resource is in lightmaps.dat.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.D3DObjectType">
            <summary>
            D3D object types.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.ResourceSerializationContext">
            <summary>
            A serialization context for serializing and deserializing resource definition structures.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.StringIdCache">
            <summary>
            A file containing a cache of all of the stringID strings.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.#ctor(System.IO.Stream,BlamCore.Cache.StringIdResolver)">
            <summary>
            Loads a stringID cache from a string_ids.dat file.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="resolver">The stringID resolver to use.</param>
        </member>
        <member name="P:BlamCore.Cache.StringIdCache.Strings">
            <summary>
            Gets the strings in the file.
            Note that strings can be <c>null</c>.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.StringIdCache.Resolver">
            <summary>
            Gets the stringID resolver that the cache is using.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.AddString(System.String)">
            <summary>
            Adds a string to the cache.
            </summary>
            <param name="str">The string to add.</param>
            <returns>The stringID corresponding to the string that was added.</returns>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.Contains(System.String)">
            <summary>
            Checks to see if a string is cached.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.GetString(BlamCore.Common.StringId)">
            <summary>
            Gets the string corresponding to a stringID.
            </summary>
            <param name="id">The stringID.</param>
            <returns>The string corresponding to the stringID, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.GetStringId(System.Int32)">
            <summary>
            Gets the stringID corresponding to a string list index.
            </summary>
            <param name="index">The string list index to convert.</param>
            <returns>The corresponding stringID.</returns>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.GetStringId(System.String)">
            <summary>
            Gets the stringID corresponding to a string in the list.
            </summary>
            <param name="value">The string to search for.</param>
            <returns>The corresponding stringID, or <see cref="F:BlamCore.Common.StringId.Null"/> if not found.</returns>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.Save(System.IO.Stream)">
            <summary>
            Saves the string data back to the file.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:BlamCore.Cache.StringIdCache.Load(System.IO.Stream)">
            <summary>
            Loads the cache from a stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="T:BlamCore.Cache.StringIdResolver">
            <summary>
            Base class for an object which converts stringID values to and from string list indices.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StringIdResolver.GetMinSetStringIndex">
            <summary>
            Gets the index of the first string which belongs to a set.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StringIdResolver.GetMaxSetStringIndex">
            <summary>
            Gets the index of the last string which belongs to a set.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StringIdResolver.GetSetOffsets">
            <summary>
            Gets the beginning offset for each set.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.StringIdResolver.StringIDToIndex(BlamCore.Common.StringId)">
            <summary>
            Converts a stringID value to a string list index.
            </summary>
            <param name="stringId">The stringID.</param>
            <returns>The string list index, or -1 if none.</returns>
        </member>
        <member name="M:BlamCore.Cache.StringIdResolver.IndexToStringID(System.Int32)">
            <summary>
            Converts a string list index to a stringID value.
            </summary>
            <param name="index">The index.</param>
            <returns>The stringID value, or <see cref="F:BlamCore.Common.StringId.Null"/> if none.</returns>
        </member>
        <member name="T:BlamCore.Cache.StringIdResolverMS23">
            <summary>
            StringID resolver for 1.106708.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.StringIdResolverMS28">
            <summary>
            StringID resolver for 11.1.498295.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.StringIdResolverMS30">
            <summary>
            StringID resolver for 12.1.700123.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.TagCache">
            <summary>
            Provides methods for easily editing tags.dat files.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.TagCache.Index">
            <summary>
            Gets the tags in the file.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.TagCache.Timestamp">
            <summary>
            Gets the timestamp stored in the file (as a FILETIME value).
            </summary>
        </member>
        <member name="M:BlamCore.Cache.TagCache.#ctor(System.IO.Stream)">
            <summary>
            Opens a tags.dat file from a stream.
            </summary>
            <param name="stream">The stream to open.</param>
        </member>
        <member name="M:BlamCore.Cache.TagCache.AllocateTag">
            <summary>
            Allocates a new tag at the end of the tag list without updating the file.
            The tag's group will be null until it is assigned data.
            You can give the tag data by using one of the overwrite functions.
            </summary>
            <returns>The allocated tag.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.AllocateTag(BlamCore.Common.TagGroup)">
            <summary>
            Allocates a new tag at the end of the tag list without updating the file.
            You can give the tag data by using one of the overwrite functions.
            </summary>
            <param name="type">The tag's type information.</param>
            <returns>The allocated tag.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.ExtractTagRaw(System.IO.Stream,BlamCore.Cache.CachedTagInstance)">
            <summary>
            Reads a tag's raw data from the file, including its header.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="tag">The tag to read.</param>
            <returns>The data that was read.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.ExtractTag(System.IO.Stream,BlamCore.Cache.CachedTagInstance)">
            <summary>
            Reads a tag's data from the file.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="tag">The tag to read.</param>
            <returns>The data that was read.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.SetTagDataRaw(System.IO.Stream,BlamCore.Cache.CachedTagInstance,System.Byte[])">
            <summary>
            Overwrites a tag's raw data, including its header.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="tag">The tag to overwrite.</param>
            <param name="data">The data to overwrite the tag with.</param>
            <exception cref="T:System.ArgumentNullException">tag</exception>
        </member>
        <member name="M:BlamCore.Cache.TagCache.SetTagData(System.IO.Stream,BlamCore.Cache.CachedTagInstance,BlamCore.Cache.CachedTagData)">
            <summary>
            Overwrites a tag's data.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="tag">The tag to overwrite.</param>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:BlamCore.Cache.TagCache.DuplicateTag(System.IO.Stream,BlamCore.Cache.CachedTagInstance)">
            <summary>
            Duplicates a tag.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="tag">The tag to duplicate.</param>
            <returns>The new tag.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.BuildTagData(System.IO.Stream,BlamCore.Cache.CachedTagInstance,System.UInt32@)">
            <summary>
            Builds a description for a tag's data without extracting anything.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="tag">The tag to read.</param>
            <param name="dataOffset">On return, this will contain the offset of the tag's data relative to its header.</param>
            <returns>The description that was built. </returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.ResizeBlock(System.IO.Stream,BlamCore.Cache.CachedTagInstance,System.Int64,System.Int64,System.Int64)">
            <summary>
            Resizes a block of data in the file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="tag">The tag that the block belongs to, if any.</param>
            <param name="startOffset">The offset where the block to resize begins at.</param>
            <param name="oldSize">The current size of the block to resize.</param>
            <param name="newSize">The new size of the block.</param>
            <exception cref="T:System.ArgumentException">Cannot resize a block to a negative size</exception>
        </member>
        <member name="M:BlamCore.Cache.TagCache.FixTagOffsets(System.Int64,System.Int64,BlamCore.Cache.CachedTagInstance)">
            <summary>
            Fixes tag offsets after a resize operation.
            </summary>
            <param name="startOffset">The offset where the resize operation took place.</param>
            <param name="sizeDelta">The amount to add to each tag offset after the start offset.</param>
            <param name="ignore">A tag to ignore.</param>
        </member>
        <member name="M:BlamCore.Cache.TagCache.Load(System.IO.BinaryReader)">
            <summary>
            Reads the tags.dat file.
            </summary>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:BlamCore.Cache.TagCache.GetNewTagOffset(System.Int32)">
            <summary>
            Gets the offset that a new tag should be inserted at so that the tags are stored in order by index.
            </summary>
            <param name="index">The index of the new tag.</param>
            <returns>The offset that the tag data should be written to.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.GetTagDataEndOffset">
            <summary>
            Gets the tag data end offset.
            </summary>
            <returns>The offset of the first byte past the last tag in the file.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCache.UpdateTagOffsets(System.IO.BinaryWriter)">
            <summary>
            Updates the tag offset table in the file.
            </summary>
            <param name="writer">The stream to write to.</param>
        </member>
        <member name="M:BlamCore.Cache.TagCache.UpdateFileHeader(System.IO.BinaryWriter,System.Int64)">
            <summary>
            Updates the file header.
            </summary>
            <param name="writer">The stream to write to.</param>
            <param name="offsetTableOffset">The offset table offset.</param>
        </member>
        <member name="T:BlamCore.Cache.TagCacheIndex">
            <summary>
            Wraps a list of tags.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.TagCacheIndex.Count">
            <summary>
            Gets the number of tags in the list.
            </summary>
        </member>
        <member name="P:BlamCore.Cache.TagCacheIndex.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:BlamCore.Cache.CachedTagInstance"/> with a specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The corresponding tag. Can be <c>null</c>.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.#ctor(System.Collections.Generic.IList{BlamCore.Cache.CachedTagInstance})">
            <summary>
            Constructs a tag list which wraps a list of tags.
            </summary>
            <param name="tags">The list of tags to wrap.</param>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.Contains(BlamCore.Cache.CachedTagInstance)">
            <summary>
            Determines whether a tag is in the list.
            </summary>
            <param name="tag">The tag.</param>
            <returns><c>true</c> if the tag is in the list.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.Contains(System.Int32)">
            <summary>
            Determines whether a tag is in the list.
            </summary>
            <param name="index">The index of the tag to check.</param>
            <returns><c>true</c> if a tag with the given index is in the list.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.NonNull">
            <summary>
            Retrieves an enumerable collection of tags which are not null.
            This should be preferred over doing this manually because it also skips tags that are in the process of being created.
            </summary>
            <returns>A collection of tags which are not null.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindFirstInGroup(BlamCore.Common.Tag)">
            <summary>
            Finds the first tag in a given group.
            </summary>
            <param name="groupTag">The group tag.</param>
            <returns>The first tag in the given group, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindFirstInGroup(System.String)">
            <summary>
            Finds the first tag in a given group.
            </summary>
            <param name="groupTag">The group tag as a string.</param>
            <returns>The first tag in the given group, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindFirstInGroup(BlamCore.Common.TagGroup)">
            <summary>
            Finds the first tag in a given group.
            </summary>
            <param name="group">The group.</param>
            <returns>The first tag in the given group, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindAllInGroup(BlamCore.Common.Tag)">
            <summary>
            Finds all tags in a given group.
            </summary>
            <param name="groupTag">The group tag.</param>
            <returns>All tags in the given group.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindAllInGroup(System.String)">
            <summary>
            Finds all tags in a given group.
            </summary>
            <param name="groupTag">The group tag as a string.</param>
            <returns>All tags in the given group.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindAllInGroup(BlamCore.Common.TagGroup)">
            <summary>
            Finds all tags in a given group.
            </summary>
            <param name="group">The group.</param>
            <returns>All tags in the given group.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindAllInGroups(System.Collections.Generic.ICollection{BlamCore.Common.Tag})">
            <summary>
            Finds all tags belonging to at least one group in a collection of groups.
            </summary>
            <param name="groupTags">The group tags.</param>
            <returns>All tags which belong to at least one of the groups.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagCacheIndex.FindDependencies(BlamCore.Cache.CachedTagInstance)">
            <summary>
            Retrieves a set of all tags that a given tag depends on.
            </summary>
            <param name="tag">The tag to scan.</param>
            <returns>A set of all tags that the tag depends on.</returns>
        </member>
        <member name="T:BlamCore.Cache.TagDeserializer">
            <summary>
            Deserializes tag data into objects by using reflection.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.#ctor(BlamCore.Cache.CacheVersion)">
            <summary>
            Constructs a tag deserializer for a specific engine version.
            </summary>
            <param name="version">The engine version to target.</param>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.Deserialize``1(BlamCore.Serialization.ISerializationContext)">
            <summary>
            Deserializes tag data into an object.
            </summary>
            <typeparam name="T">The type of object to deserialize the tag data as.</typeparam>
            <param name="context">The serialization context to use.</param>
            <returns>The object that was read.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.Deserialize(BlamCore.Serialization.ISerializationContext,System.Type)">
            <summary>
            Deserializes tag data into an object.
            </summary>
            <param name="context">The serialization context to use.</param>
            <param name="structureType">The type of object to deserialize the tag data as.</param>
            <returns>The object that was read.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeStruct(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,BlamCore.Serialization.TagStructureInfo)">
            <summary>
            Deserializes a structure.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="info">Information about the structure to deserialize.</param>
            <returns>The deserialized structure.</returns>
            <exception cref="T:System.InvalidOperationException">Target type must have TagStructureAttribute</exception>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeProperty(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,System.Object,BlamCore.Serialization.TagFieldEnumerator,System.Int64)">
            <summary>
            Deserializes a property of a structure.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="instance">The instance to store the property to.</param>
            <param name="enumerator">The active element enumerator.</param>
            <param name="baseOffset">The offset of the start of the structure.</param>
            <exception cref="T:System.InvalidOperationException">Offset for property is outside of its structure</exception>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeValue(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,BlamCore.Serialization.TagFieldAttribute,System.Type)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="valueInfo">The value information. Can be <c>null</c>.</param>
            <param name="valueType">The type of the value to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializePrimitiveValue(BlamCore.IO.EndianReader,System.Type)">
            <summary>
            Deserializes a primitive value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="valueType">The type of the value to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:System.ArgumentException">Unsupported type</exception>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeComplexValue(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,BlamCore.Serialization.TagFieldAttribute,System.Type)">
            <summary>
            Deserializes a complex value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="valueInfo">The value information. Can be <c>null</c>.</param>
            <param name="valueType">The type of the value to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeTagBlock(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,System.Type)">
            <summary>
            Deserializes a tag block (list of values).
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="valueType">The type of the value to deserialize.</param>
            <returns>The deserialized tag block.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeIndirectValue(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,System.Type)">
            <summary>
            Deserializes a value which is pointed to by an address.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="valueType">The type of the value to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeTagReference(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Deserializes a tag reference.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="valueInfo">The value information. Can be <c>null</c>.</param>
            <returns>The deserialized tag reference.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeDataReference(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext)">
            <summary>
            Deserializes a data reference.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <returns>The deserialized data reference.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeInlineArray(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,BlamCore.Serialization.TagFieldAttribute,System.Type)">
            <summary>
            Deserializes an inline array.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="valueInfo">The value information. Can be <c>null</c>.</param>
            <param name="valueType">The type of the value to deserialize.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeString(BlamCore.IO.EndianReader,BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Deserializes a null-terminated ASCII string.
            </summary>
            <param name="reader">The reader.</param>
            <param name="valueInfo">The value information.</param>
            <returns>The deserialized string.</returns>
        </member>
        <member name="M:BlamCore.Cache.TagDeserializer.DeserializeRange(BlamCore.IO.EndianReader,BlamCore.Serialization.ISerializationContext,System.Type)">
            <summary>
            Deserializes a <see cref="T:BlamCore.Common.Bounds`1"/> value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The serialization context to use.</param>
            <param name="rangeType">The range's type.</param>
            <returns>The deserialized range.</returns>
        </member>
        <member name="T:BlamCore.Cache.TagSerializationContext">
            <summary>
            A serialization context for serializing and deserializing tags.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.TagSerializationContext.#ctor(System.IO.Stream,BlamCore.Cache.GameCacheContext,BlamCore.Cache.CachedTagInstance)">
            <summary>
            Creates a tag serialization context which serializes data into a tag.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="context">The game cache context.</param>
            <param name="tag">The tag to overwrite.</param>
        </member>
        <member name="P:BlamCore.Cache.TagSerializationContext.Tag">
            <summary>
            Gets the tag that the context is operating on.
            </summary>
        </member>
        <member name="T:BlamCore.Cache.TagSerializer">
            <summary>
            Serializes classes into tag data by using reflection.
            </summary>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.#ctor(BlamCore.Cache.CacheVersion)">
            <summary>
            Constructs a tag serializer for a specific engine version.
            </summary>
            <param name="version">The engine version to target.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.Serialize(BlamCore.Serialization.ISerializationContext,System.Object,System.Nullable{System.UInt32})">
            <summary>
            Serializes a tag structure into a context.
            </summary>
            <param name="context">The serialization context to use.</param>
            <param name="tagStructure">The tag structure.</param>
            <param name="offset">An optional offset to begin serializing at.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeStruct(BlamCore.Serialization.ISerializationContext,System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,BlamCore.Serialization.TagStructureInfo,System.Object)">
            <summary>
            Serializes a structure into a temporary memory block.
            </summary>
            <param name="context">The serialization context to use.</param>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="info">Information about the tag structure type.</param>
            <param name="structure">The structure to serialize.</param>
            <exception cref="T:System.InvalidOperationException">Structure type must have TagStructureAttribute</exception>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeProperty(BlamCore.Cache.CacheVersion,BlamCore.Serialization.ISerializationContext,System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,System.Object,BlamCore.Serialization.TagFieldEnumerator,System.Int64)">
            <summary>
            Serializes a property.
            </summary>
            <param name="version"></param>
            <param name="context">The serialization context to use.</param>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="instance">The object that the property belongs to.</param>
            <param name="enumerator">The field enumerator.</param>
            <param name="baseOffset">The base offset of the structure from the start of its block.</param>
            <exception cref="T:System.InvalidOperationException">Offset for property \ + property.Name + \ is outside of its structure</exception>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeValue(BlamCore.Cache.CacheVersion,BlamCore.Serialization.ISerializationContext,System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,System.Object,BlamCore.Serialization.TagFieldAttribute,System.Type)">
            <summary>
            Serializes a value.
            </summary>
            <param name="version"></param>
            <param name="context">The serialization context to use.</param>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="val">The value.</param>
            <param name="valueInfo">Information about the value. Can be <c>null</c>.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializePrimitiveValue(System.IO.BinaryWriter,System.Object,System.Type)">
            <summary>
            Serializes a primitive value.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="val">The value.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeComplexValue(BlamCore.Cache.CacheVersion,BlamCore.Serialization.ISerializationContext,System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,System.Object,BlamCore.Serialization.TagFieldAttribute,System.Type)">
            <summary>
            Serializes a complex value.
            </summary>
            <param name="version"></param>
            <param name="context">The serialization context to use.</param>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="val">The value.</param>
            <param name="valueInfo">Information about the value. Can be <c>null</c>.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeString(System.IO.BinaryWriter,System.String,BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Serializes a string.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="str">The string to serialize.</param>
            <param name="valueInfo">Information about the value.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeTagReference(System.IO.BinaryWriter,BlamCore.Cache.CachedTagInstance,BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Serializes a tag reference.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="referencedTag">The referenced tag.</param>
            <param name="valueInfo">Information about the value. Can be <c>null</c>.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeDataReference(System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,System.Byte[],BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Serializes a data reference composed of raw bytes.
            </summary>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="data">The data.</param>
            <param name="valueInfo">Information about the value. Can be <c>null</c>.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeInlineArray(BlamCore.Cache.CacheVersion,BlamCore.Serialization.ISerializationContext,System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,System.Array,BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Serializes an inline array.
            </summary>
            <param name="version"></param>
            <param name="context">The serialization context to use.</param>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="data">The array.</param>
            <param name="valueInfo">Information about the value. Can be <c>null</c>.</param>
        </member>
        <member name="M:BlamCore.Cache.TagSerializer.SerializeTagBlock(BlamCore.Cache.CacheVersion,BlamCore.Serialization.ISerializationContext,System.IO.MemoryStream,BlamCore.Serialization.IDataBlock,System.Object,System.Type,BlamCore.Serialization.TagFieldAttribute)">
            <summary>
            Serializes a tag block.
            </summary>
            <param name="version"></param>
            <param name="context">The serialization context to use.</param>
            <param name="tagStream">The stream to write completed blocks of tag data to.</param>
            <param name="block">The temporary block to write incomplete tag data to.</param>
            <param name="list">The list of values in the tag block.</param>
            <param name="listType">Type of the list.</param>
            <param name="valueInfo">Information about the value. Can be <c>null</c>.</param>
        </member>
        <member name="T:BlamCore.Geometry.BlenderPhmoMoppUtil">
            <summary>
            Utilities for generating moppcode from jsonPhmoExporter json data.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.BlenderPhmoMoppUtil.GenerateForBlenderPhmoJsonFile(System.String)">
            <summary>
            GenerateForBlenderPhmoJsonFile
            </summary>
            <param name="jsonFPath">Path to the JSON file containing blender exported using the jsonPhmoExporter plugin.</param>
            <returns>A memory stream with Havok 6.5.0 moppcode block</returns>
        </member>
        <member name="M:BlamCore.Geometry.BlenderPhmoMoppUtil.GenerateForBlenderPhmoJson(System.String)">
            <summary>
            GenerateForBlenderPhmoJson
            </summary>
            <param name="jsonString">String containing blender exported JSON using the jsonPhmoExporter plugin.</param>
            <returns>A memory stream with Havok 6.5.0 moppcode block</returns>
        </member>
        <member name="M:BlamCore.Geometry.BlenderPhmoMoppUtil.SynthesizeMoppBlock(System.IO.MemoryStream)">
            <summary>
            Creates a CollisionMoppCode instance using data from the moppstream
            </summary>
            <param name="moppStream">A havok 6.5.0 moppcode block</param>
            <returns></returns>
        </member>
        <member name="T:BlamCore.Geometry.BlenderPhmoReader">
            <summary>
            This class loads, reads, tokenises, and parses a simple file format
            designed to store data exported from the Blender modeling program. 
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MAIN_STRUCT_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MAIN_STRUCT_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MAIN_MATERIAL_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MAIN_REGION_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MAIN_PATHF_SPHERES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MAIN_NODES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.MATERIAL_TAGBLOCK_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.REGION_TAGBLOCK_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.REGION_PERMUTATION_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.PERMUTATION_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.PATHF_SPHERE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.NODE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_BSP3DNODES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_PLANES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_LEAVES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_BSP2DREFERENCES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_BSP2DNODES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_SURFACES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_EDGES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_VERTICES_OFFSET">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP3DNODE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.PLANE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.LEAF_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP2DREFERENCE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.BSP2DNODE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.SURFACE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.EDGE_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.CollisionGeometryBuilder.VERTEX_SIZE">
            <summary>
            Offset and Size values for H1CE tagblock structs
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.CollisionGeometryBuilder.ParseMaterials(BlamCore.TagDefinitions.CollisionModel,System.IO.BinaryReader,System.Int32)">
            <summary>
            Stub for now, creates n materials, which are named 0 to (n-1)
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.CollisionGeometryBuilder.ParseRegions(BlamCore.TagDefinitions.CollisionModel,System.IO.BinaryReader,System.Int32)">
            <summary>
            Parses regions into Halo Online collision 'Region' tagblocks.
            Names are not preserved.
            </summary>
            <param name="coll"></param>
            <param name="reader"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Geometry.CollisionGeometryBuilder.ParseNodes(BlamCore.TagDefinitions.CollisionModel,System.IO.BinaryReader,System.Int32)">
            <summary>
            Parses all H1CE Collision Node tagblocks stored sequentially.
            The purpose of 'Node' is similar to 'Region' in Halo Online.
            </summary>
            <param name="coll"></param>
            <param name="reader"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Geometry.CollisionGeometryBuilder.ParseFromFile(System.String)">
             <summary>
             This file parser will parse Halo 1 CE 'model_collision_geometry' tags.
             The addresses of the tagblocks inside the tag are likely to be garbage
             values. The Halo 1 CE development tool 'guerilla' does not use the 
             reflexive address value and expects chunks to occur in the order that
             the reflexives occur in the parent struct.
             
             The Halo1 CE collision tag is used due to high compatibility and 
             availability of 'Tool' - a program which can compile collision tags.
             
             The parser expects the following format:
             h1ce coll tag format:
            main struct
            all materials sequential
            all regions sequential
            all permutations sequential
            all path finding spheres sequential
            all nodes sequential
            bsp 0
            	   bsp0 3dnodes sequential
            	   ...
            	   bsp0 vertices sequential
            bsp 1
            	   ...
            ...
             </summary>
             <param name="fpath"></param>
             <returns></returns>
        </member>
        <member name="T:BlamCore.Geometry.IndexBufferStream">
            <summary>
            Reads and writes index buffer data.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.#ctor(System.IO.Stream,BlamCore.Geometry.IndexBufferFormat,BlamCore.IO.EndianFormat)">
            <summary>
            Creates an index buffer stream.
            </summary>
            <param name="stream">The base stream to use. It must point to the beginning of the index buffer.</param>
            <param name="format">The format of each index in the buffer.</param>
            <param name="endianFormat">The endian format of the index buffer.</param>
        </member>
        <member name="P:BlamCore.Geometry.IndexBufferStream.Position">
            <summary>
            The position of the stream in units of indices.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.ReadIndex">
            <summary>
            Reads an index and advances the stream.
            </summary>
            <returns>The index that was read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.WriteIndex(System.UInt32)">
            <summary>
            Writes an index and advances the stream.
            </summary>
            <param name="index">The index to write.</param>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.ReadIndices(System.UInt32[],System.UInt32,System.UInt32)">
            <summary>
            Reads indices into an array and advances the stream.
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset into the buffer to start storing at.</param>
            <param name="count">The number of indices to read.</param>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.ReadIndices(System.UInt32)">
            <summary>
            Reads an array of indices.
            </summary>
            <param name="count">The number of indices to read.</param>
            <returns>The indices that were read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.WriteIndices(System.UInt32[],System.UInt32,System.UInt32)">
            <summary>
            Writes indices from an array and advances the stream.
            </summary>
            <param name="buffer">The buffer of indices to write.</param>
            <param name="offset">The offset into the buffer to start writing at.</param>
            <param name="count">The number of indices to write.</param>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.WriteIndices(System.UInt32[])">
            <summary>
            Writes indices from an array and advances the stream.
            </summary>
            <param name="buffer">The indices to write.</param>
        </member>
        <member name="M:BlamCore.Geometry.IndexBufferStream.ReadTriangleStrip(System.UInt32)">
            <summary>
            Reads a triangle strip and converts it into a triangle list.
            Degenerate triangles will be included and must be discarded manually.
            </summary>
            <param name="indexCount">The number of indices in the strip. Cannot be 1 or 2.</param>
            <returns>The triangle strip converted into a triangle list.</returns>
        </member>
        <member name="T:BlamCore.Geometry.IndexBufferFormat">
            <summary>
            Index buffer formats.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.IndexBufferFormat.UInt16">
            <summary>
            Each index is an unsigned 16-bit integer.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.IndexBufferFormat.UInt32">
            <summary>
            Each index is an unsigned 32-bit integer.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.Mesh">
            <summary>
            A 3D mesh which can be rendered.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.Mesh.Part">
            <summary>
            Associates geometry with a specific material.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.MaterialIndex">
            <summary>
            The block index of the material of the mesh part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.TransparentSortingIndex">
            <summary>
            The transparent sorting index of the mesh part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.FirstIndex">
            <summary>
            The index of the first vertex in the index buffer.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.IndexCount">
            <summary>
            The number of indices in the part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.FirstSubPartIndex">
            <summary>
            The index of the first subpart that makes up this part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.SubPartCount">
            <summary>
            The number of subparts that make up this part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.Type">
            <summary>
            The type of the mesh part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.Flags">
            <summary>
            The flags of the mesh part.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.Part.VertexCount">
            <summary>
            The number of vertices that the mesh part uses.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.Mesh.Part.PartFlags">
            <summary>
            WARNING: EXPERIMENTAL H5F VALUES!!!
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.Mesh.SubPart">
            <summary>
            A subpart of a mesh which can be rendered selectively.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.SubPart.FirstIndex">
            <summary>
            The index of the first vertex in the subpart.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.SubPart.IndexCount">
            <summary>
            The number of indices in the subpart.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.SubPart.PartIndex">
            <summary>
            The index of the part which this subpart belongs to.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.Mesh.SubPart.VertexCount">
            <summary>
            The number of vertices that the part uses.
            </summary>
            <remarks>
            Note that this actually seems to be unused. The value is pulled from
            the vertex buffer definition instead.
            </remarks>
        </member>
        <member name="T:BlamCore.Geometry.MeshFlags">
            <summary>
            Mesh flags.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.MeshFlags.VertexColors">
            <summary>
            Indicates that the mesh has vertex colors instead of PRT data.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.MeshReader">
            <summary>
            Provides functions for reading mesh data.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.#ctor(BlamCore.Cache.CacheVersion,BlamCore.Geometry.Mesh,BlamCore.TagResources.RenderGeometryApiResourceDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:BlamCore.Geometry.MeshReader"/> class.
            </summary>
            <param name="version">The engine version to target.</param>
            <param name="mesh">The mesh.</param>
            <param name="definition">The mesh's definition data.</param>
        </member>
        <member name="P:BlamCore.Geometry.MeshReader.Mesh">
            <summary>
            Gets the mesh.
            </summary>
        </member>
        <member name="P:BlamCore.Geometry.MeshReader.Definition">
            <summary>
            Gets the mesh's definition data.
            </summary>
        </member>
        <member name="P:BlamCore.Geometry.MeshReader.VertexStreams">
            <summary>
            Gets the vertex streams for the mesh. Note that elements can be <c>null</c>.
            </summary>
        </member>
        <member name="P:BlamCore.Geometry.MeshReader.IndexBuffers">
            <summary>
            Gets the index streams for the mesh. Note that elements can be <c>null</c>.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.OpenVertexStream(BlamCore.TagResources.VertexBufferDefinition,System.IO.Stream)">
            <summary>
            Opens a vertex stream on one of the mesh's vertex buffers.
            </summary>
            <param name="definition">The vertex buffer definition.</param>
            <param name="baseStream">The stream open on the mesh's resource data to use as a base stream.</param>
            <returns>The vertex stream if successful, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.OpenVertexStream(System.Int32,System.IO.Stream)">
            <summary>
            Opens a vertex stream on one of the mesh's vertex streams.
            </summary>
            <param name="streamIndex">Index of the vertex stream to open.</param>
            <param name="baseStream">The stream open on the mesh's resource data to use as a base stream.</param>
            <returns>The vertex stream if successful, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.OpenIndexBufferStream(BlamCore.TagResources.IndexBufferDefinition,System.IO.Stream)">
            <summary>
            Opens an index buffer stream on one of the mesh's index buffers.
            </summary>
            <param name="definition">The index buffer definition.</param>
            <param name="baseStream">The stream open on the mesh's resource data to use as a base stream.</param>
            <returns>The index buffer stream if successful, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.OpenIndexBufferStream(System.Int32,System.IO.Stream)">
            <summary>
            Opens an index buffer stream on one of the mesh's index buffers.
            </summary>
            <param name="bufferIndex">Index of the index buffer to open.</param>
            <param name="baseStream">The stream open on the mesh's resource data to use as a base stream.</param>
            <returns>The index buffer stream if successful, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.BindVertexStreams">
            <summary>
            Binds each vertex buffer in the mesh to a stream.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.MeshReader.BindIndexBuffers">
            <summary>
            Binds each index buffer in the mesh.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.ObjExtractor">
            <summary>
            Extracts render model data to Wavefront .obj files.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:BlamCore.Geometry.ObjExtractor"/> class.
            </summary>
            <param name="writer">The stream to write the output file to.</param>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ExtractMesh(BlamCore.Geometry.MeshReader,BlamCore.Geometry.VertexCompressor,System.IO.Stream)">
            <summary>
            Writes mesh data to the .obj.
            </summary>
            <param name="reader">The mesh reader to use.</param>
            <param name="compressor">The vertex compressor to use.</param>
            <param name="resourceStream">A stream open on the resource data.</param>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.Finish">
            <summary>
            Finishes writing meshes out to the file.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ReadVertices(BlamCore.Geometry.MeshReader,System.IO.Stream)">
            <summary>
            Reads the vertex data for a mesh into a format-independent list.
            </summary>
            <param name="reader">The mesh reader to use.</param>
            <param name="resourceStream">A stream open on the resource data.</param>
            <returns>The list of vertices that were read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ReadRigidVertices(BlamCore.Geometry.IVertexStream,System.Int32)">
            <summary>
            Reads rigid vertices into a format-independent list.
            </summary>
            <param name="reader">The vertex reader to read from.</param>
            <param name="count">The number of vertices to read.</param>
            <returns>The vertices that were read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ReadSkinnedVertices(BlamCore.Geometry.IVertexStream,System.Int32)">
            <summary>
            Reads skinned vertices into a format-independent list.
            </summary>
            <param name="reader">The vertex reader to read from.</param>
            <param name="count">The number of vertices to read.</param>
            <returns>The vertices that were read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ReadDualQuatVertices(BlamCore.Geometry.IVertexStream,System.Int32)">
            <summary>
            Reads dualquat vertices into a format-independent list.
            </summary>
            <param name="reader">The vertex reader to read from.</param>
            <param name="count">The number of vertices to read.</param>
            <returns>The vertices that were read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ReadWorldVertices(BlamCore.Geometry.IVertexStream,System.Int32)">
            <summary>
            Reads world vertices into a format-independent list.
            </summary>
            <param name="reader">The vertex reader to read from.</param>
            <param name="count">The number of vertices to read.</param>
            <returns>The vertices that were read.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.DecompressVertices(System.Collections.Generic.IEnumerable{BlamCore.Geometry.ObjExtractor.ObjVertex},BlamCore.Geometry.VertexCompressor)">
            <summary>
            Decompresses vertex data in-place.
            </summary>
            <param name="vertices">The vertices to decompress in-place.</param>
            <param name="compressor">The compressor to use.</param>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.ReadIndices(BlamCore.Geometry.MeshReader,BlamCore.Geometry.Mesh.Part,System.IO.Stream)">
            <summary>
            Reads the index buffer data and converts it into a triangle list if necessary.
            </summary>
            <param name="reader">The mesh reader to use.</param>
            <param name="part">The mesh part to read.</param>
            <param name="resourceStream">A stream open on the resource data.</param>
            <returns>The index buffer converted into a triangle list.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.WriteHeader">
            <summary>
            Writes a header to the file.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.WriteVertices(System.Collections.Generic.IEnumerable{BlamCore.Geometry.ObjExtractor.ObjVertex})">
            <summary>
            Writes vertex data out to the file.
            </summary>
            <param name="vertices">The vertices to write.</param>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.WriteVertex(BlamCore.Geometry.ObjExtractor.ObjVertex)">
            <summary>
            Writes a vertex out to the file.
            </summary>
            <param name="vertex">The vertex to write.</param>
        </member>
        <member name="M:BlamCore.Geometry.ObjExtractor.WriteTriangles(System.Collections.Generic.IReadOnlyList{System.UInt32})">
            <summary>
            Queues triangle list data to be written out to the file.
            </summary>
            <param name="indices">The indices for the triangle list. Each set of 3 indices forms one triangle.</param>
        </member>
        <member name="M:BlamCore.Geometry.PhysicsModelBuilder.#ctor">
            <summary>
            Initialise the physics model to be built
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.PhysicsModelBuilder.AddShape(BlamCore.TagDefinitions.PhysicsModel,SimpleJSON.JSONNode)">
            <summary>
            Finds the type of the shape and adds it. Currently, only 'Polyhedron' is supported.
            </summary>
            <param name="phmo">the tag to add the shape to</param> 
            <param name="n">the json node from which to parse the shape description.</param>
            <returns>shape type added, 'Unused0' is used to represent failure.</returns>
        </member>
        <member name="M:BlamCore.Geometry.PhysicsModelBuilder.getNumberOfShapes(BlamCore.TagDefinitions.PhysicsModel,BlamCore.TagDefinitions.PhysicsModel.RigidBody.ShapeTypeValue)">
            <summary>
            Gets the number of shapes in the list for the particular shape
            </summary>
            <param name="phmo">the serialized phmo from which to get the counts</param>
            <param name="type">the shape for which to get the count</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.Geometry.PhysicsModelBuilder.AddManyPlanes(BlamCore.TagDefinitions.PhysicsModel,SimpleJSON.JSONNode)">
            <summary>
            Adds planes to the physics model as described by the JSON node
            </summary>
            <param name="phmo"></param>
            <param name="n">a node that is a list of plane equations</param>
            <returns>The number of plane-equation tag-blocks added</returns>
        </member>
        <member name="M:BlamCore.Geometry.PhysicsModelBuilder.AddManyFVS(BlamCore.TagDefinitions.PhysicsModel,SimpleJSON.JSONNode)">
            <summary>
            Adds Four-vertex tag-blocks to the physics model. For lists
            of vertices that are not multiples of four, the last vertex
            is copied. 
            </summary>
            <param name="phmo"></param>
            <param name="n">a node that is a list of vertex equations</param>
            <returns>the number of four-vertex tag-blocks added.</returns>
        </member>
        <member name="T:BlamCore.Geometry.PrimitiveType">
            <summary>
            Model primitive types.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.PrtType">
            <summary>
            Precomputed radiance transfer (PRT) types.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.RenderGeometry.RuntimeFlags">
            <summary>
            The runtime flags of the render geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.RenderGeometry.Meshes">
            <summary>
            The meshes of the render geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.RenderGeometry.Compression">
            <summary>
            The compression information of the render geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.RenderGeometry.Resource">
            <summary>
            The resource containing the raw geometry data.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.RenderGeometry.ZoneAssetIndex">
            <summary>
            The index of the resource entry in the cache_file_resource_gestalt tag.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.GeometryCompressionInfo">
            <summary>
            Contains information about how geometry is compressed.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.GeometryCompressionInfo.Flags">
            <summary>
            The flags of the geometry compression.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.GeometryCompressionInfo.X">
            <summary>
            The minimum X value in the uncompressed geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.GeometryCompressionInfo.Y">
            <summary>
            The minimum Y value in the uncompressed geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.GeometryCompressionInfo.Z">
            <summary>
            The minimum Z value in the uncompressed geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.GeometryCompressionInfo.U">
            <summary>
            The minimum U value in the uncompressed geometry.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.GeometryCompressionInfo.V">
            <summary>
            The minimum V value in the uncompressed geometry.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.RenderMaterial">
            <summary>
            A material describing how a mesh part should be rendered.
            </summary>
        </member>
        <member name="F:BlamCore.Geometry.RenderMaterial.RenderMethod">
            <summary>
            The render method tag to use to render the material.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.RenderModelBuilder">
            <summary>
            Utility class for creating render models from scratch.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.#ctor(BlamCore.Cache.CacheVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:BlamCore.Geometry.RenderModelBuilder"/> class for a particular engine version.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.AddNode(BlamCore.TagDefinitions.RenderModel.Node)">
            <summary>
            Adds a node to the model.
            </summary>
            <param name="node">The node to add.</param>
            <returns>The node index.</returns>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.AddMaterial(BlamCore.Geometry.RenderMaterial)">
            <summary>
            Adds a material to the model.
            </summary>
            <param name="material">The material.</param>
            <returns>The material index.</returns>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BeginRegion(BlamCore.Common.StringId)">
            <summary>
            Begins building a new model region.
            </summary>
            <param name="name">The name stringID.</param>
            <exception cref="T:System.InvalidOperationException">Cannot begin a new region while another is active</exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.EndRegion">
            <summary>
            Finishes building the current region.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Cannot end a region if nothing is active
            or
            Cannot end a region while a permutation is still active
            </exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BeginPermutation(BlamCore.Common.StringId)">
            <summary>
            Begins building a new model permutation in the current region.
            </summary>
            <param name="name">The name stringID.</param>
            <exception cref="T:System.InvalidOperationException">
            Cannot begin a new permutation if a region is not active
            or
            Cannot begin a new permutation while another is active
            </exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.EndPermutation">
            <summary>
            Finishes building the current permutation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Cannot end a permutation if nothing is active
            or
            Cannot end a permutation while a mesh is still active
            or
            Cannot end a permutation if no region is active
            </exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BeginMesh">
            <summary>
            Begins building a new mesh in the current permutation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Cannot begin a new mesh if a permutation is not active
            or
            Cannot begin a new mesh while another is active
            </exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.EndMesh">
            <summary>
            Finishes building the current mesh.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Cannot end a mesh if nothing is active
            or
            Cannot end a mesh if no permutation is active
            </exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BindRigidVertexBuffer(System.Collections.Generic.IEnumerable{BlamCore.Geometry.RigidVertex},System.SByte)">
            <summary>
            Binds a rigid vertex buffer to the current mesh.
            </summary>
            <param name="vertices">The vertices to bind.</param>
            <param name="nodeIndex">The node to attach the vertices to.</param>
            <exception cref="T:System.InvalidOperationException">Cannot bind a rigid vertex buffer if no mesh is active</exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BindWorldVertexBuffer(System.Collections.Generic.IEnumerable{BlamCore.Geometry.WorldVertex})">
            <summary>
            Binds a world vertex to the current mesh.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BindSkinnedVertexBuffer(System.Collections.Generic.IEnumerable{BlamCore.Geometry.SkinnedVertex})">
            <summary>
            Binds a skinned vertex buffer to the current mesh.
            </summary>
            <param name="vertices">The vertices to bind.</param>
            <exception cref="T:System.InvalidOperationException">Cannot bind a skinned vertex buffer if no mesh is active</exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BindIndexBuffer(System.Collections.Generic.IEnumerable{System.UInt16},BlamCore.Geometry.PrimitiveType)">
            <summary>
            Binds an index buffer to the current mesh.
            </summary>
            <param name="indices">The indices to bind.</param>
            <param name="primitiveType">The primitive type to use.</param>
            <exception cref="T:System.InvalidOperationException">Cannot bind an index buffer if no mesh is active</exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.BeginPart(System.Int16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Begins a new part in the current mesh.
            </summary>
            <param name="materialIndex">Index of the material.</param>
            <param name="firstIndex">The first index.</param>
            <param name="indexCount">The index count.</param>
            <param name="vertexCount">The vertex count.</param>
            <exception cref="T:System.InvalidOperationException">Cannot define a part if no mesh is active</exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.DefineSubPart(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Defines a subpart in the current mesh part.
            </summary>
            <param name="firstIndex">The part's first index.</param>
            <param name="indexCount">The part's index count.</param>
            <param name="vertexCount">The part's vertex count.</param>
            <exception cref="T:System.InvalidOperationException">Cannot define a mesh subpart if no mesh part is active</exception>
        </member>
        <member name="M:BlamCore.Geometry.RenderModelBuilder.Build(BlamCore.Cache.TagSerializer,System.IO.Stream)">
            <summary>
            Builds a model tag and resource data.
            </summary>
            <param name="serializer">The tag serializer to use to serialize the model definition data.</param>
            <param name="resourceDataStream">The stream to write resource data to.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Cannot build a model if a region is active</exception>
        </member>
        <member name="T:BlamCore.Geometry.ShaderCompiler">
            <summary>
            Utility class for invoking the D3D shader compiler functions.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.ShaderCompiler.Assemble(System.String,System.String@)">
            <summary>
            Assembles HLSL shader assembly.
            </summary>
            <param name="code">The code to assemble.</param>
            <param name="errors">Pointer to a string to receive error messages. Will be set to <c>null</c> if errors are not available.</param>
            <returns>The bytecode for the shader if successful, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ShaderCompiler.Disassemble(System.Byte[])">
            <summary>
            Disassembles HLSL shader bytecode.
            </summary>
            <param name="shader">The shader to disassemble.</param>
            <returns>The disassembled shader if successful, or <c>null</c> otherwise.</returns>
        </member>
        <member name="T:BlamCore.Geometry.ShaderConverter">
            <summary>
            Utility class for converting shader bytecode between rendering pipelines.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.ShaderConverter.ConvertNewVertexShaderToOld(System.Byte[],System.Int32,BlamCore.Geometry.VertexType)">
            <summary>
            Converts a new (1.235640+) vertex shader to one compatible with the 1.106708 pipeline.
            Note that this requires that models have binormals set so that X = Position.W and Y = Tangent.W.
            </summary>
            <param name="shaderData">The shader bytecode to convert.</param>
            <param name="mode">The drawing mode.</param>
            <param name="type">The vertex type.</param>
            <returns>The new bytecode, or <c>null</c> if conversion failed.</returns>
        </member>
        <member name="M:BlamCore.Geometry.ShaderConverter.ConvertNewPixelShaderToOld(System.Byte[],System.Int32)">
            <summary>
            Converts a new (1.235640+) pixel shader to one compatible with the 1.106708 pipeline.
            </summary>
            <param name="shaderData">The shader bytecode to convert.</param>
            <param name="mode">The drawing mode.</param>
            <returns>The new bytecode, or <c>null</c> if conversion failed.</returns>
        </member>
        <member name="T:BlamCore.Geometry.VertexBufferFormat">
            <summary>
            Vertex buffer formats.
            </summary>
        </member>
        <member name="T:BlamCore.Geometry.VertexCompressor">
            <summary>
            Compresses and decompresses vertex data.
            </summary>
        </member>
        <member name="M:BlamCore.Geometry.VertexCompressor.#ctor(BlamCore.Geometry.GeometryCompressionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:BlamCore.Geometry.VertexCompressor"/> class.
            </summary>
            <param name="info">The compression info to use.</param>
        </member>
        <member name="M:BlamCore.Geometry.VertexCompressor.CompressPosition(BlamCore.Common.RealQuaternion)">
            <summary>
            Compresses a position so that its components are between 0 and 1.
            </summary>
            <param name="pos">The position to compress.</param>
            <returns>The compressed position.</returns>
        </member>
        <member name="M:BlamCore.Geometry.VertexCompressor.DecompressPosition(BlamCore.Common.RealQuaternion)">
            <summary>
            Decompresses a position so that its components are in model space.
            </summary>
            <param name="pos">The position to decompress.</param>
            <returns>The decompressed position.</returns>
        </member>
        <member name="M:BlamCore.Geometry.VertexCompressor.CompressUv(BlamCore.Common.RealVector2d)">
            <summary>
            Compresses texture coordinates so that the components are between 0 and 1.
            </summary>
            <param name="uv">The texture coordinates to compress.</param>
            <returns>The compressed coordinates.</returns>
        </member>
        <member name="M:BlamCore.Geometry.VertexCompressor.DecompressUv(BlamCore.Common.RealVector2d)">
            <summary>
            Decompresses texture coordinates.
            </summary>
            <param name="uv">The texture coordinates to decompress.</param>
            <returns>The decompressed coordinates.</returns>
        </member>
        <member name="M:BlamCore.Geometry.VertexStreamFactory.Create(BlamCore.Cache.CacheVersion,System.IO.Stream)">
            <summary>
            Creates a vertex stream for a given engine version.
            </summary>
            <param name="version">The engine version.</param>
            <param name="stream">The base stream.</param>
            <returns>The created vertex stream.</returns>
        </member>
        <member name="T:BlamCore.Geometry.VertexType">
            <summary>
            Vertex types.
            </summary>
        </member>
        <member name="M:BlamCore.IO.EndianReader.#ctor(System.IO.Stream,BlamCore.IO.EndianFormat)">
            <summary>
            Creates a new instance of the EndianReader class.
            </summary>
            <param name="Stream">The Stream to read from.</param>
            <param name="Type">The default EndianFormat the EndianReader will use.</param>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadDouble">
            <summary>
            Reads a Double value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadInt16">
            <summary>
            Reads an Int16 value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadInt32">
            <summary>
            Reads an Int32 value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadInt64">
            <summary>
            Reads an Int64 value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadSingle">
            <summary>
            Reads a Single value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadUInt16">
            <summary>
            Reads a UInt16 value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadUInt32">
            <summary>
            Reads a UInt32 value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadUInt64">
            <summary>
            Reads a UInt64 value in the EndianReader's default EndianFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadDouble(BlamCore.IO.EndianFormat)">
            <summary>
            Reads a Double value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadInt16(BlamCore.IO.EndianFormat)">
            <summary>
            Reads an Int16 value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadInt32(BlamCore.IO.EndianFormat)">
            <summary>
            Reads an Int32 value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadInt64(BlamCore.IO.EndianFormat)">
            <summary>
            Reads an Int64 value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadSingle(BlamCore.IO.EndianFormat)">
            <summary>
            Reads a Single value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadUInt16(BlamCore.IO.EndianFormat)">
            <summary>
            Reads a UInt16 value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadUInt32(BlamCore.IO.EndianFormat)">
            <summary>
            Reads a UInt32 value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadUInt64(BlamCore.IO.EndianFormat)">
            <summary>
            Reads a UInt64 value in the specified EndianFormat.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadString(System.Int32,System.Boolean)">
            <summary>
            Reads a UTF8 string of specified length.
            </summary>
            <param name="Length">The number of characters to read into the string.</param>
            <param name="Trim">Weather to trim white-space from the string. Defaults to true.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadNullTerminatedString">
            <summary>
            Reads a null-terminated UTF8 string of indefinite length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.ReadNullTerminatedString(System.Int32)">
            <summary>
            Reads a null-terminated UTF8 string of length up to MaxLength and advances the stream position by MaxLength bytes.
            </summary>
            <param name="MaxLength">The maximum number of characters to read.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.PeekUInt16">
            <summary>
            Returns the next BigEndian UInt16 and does not advance the stream position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.PeekUInt16(BlamCore.IO.EndianFormat)">
            <summary>
            Returns the next UInt16 and does not advance the stream position.
            </summary>
            <param name="Type">The EndianFormat of the value.</param>
            <returns></returns>
        </member>
        <member name="M:BlamCore.IO.EndianReader.DecryptAesSegment(System.Int32,System.String)">
            <summary>
            Decrypts a segment of an EndianReader stream.
            </summary>
            <param name="length">The number of bytes to decrypt.</param>
            <param name="key">The decryption key as a string.</param>
            <returns>A new <see cref="T:System.IO.MemoryStream"/> containing the decrypted segment.</returns>
        </member>
        <member name="T:BlamCore.IO.ProcessMemoryStream">
            <summary>
            A stream which reads/writes another process's memory.
            </summary>
        </member>
        <member name="M:BlamCore.IO.ProcessMemoryStream.#ctor(System.Diagnostics.Process)">
            <summary>
            Constructs a new ProcessMemoryStream that accesses the memory of a specified process.
            </summary>
            <param name="process">The process to access the memory of.</param>
        </member>
        <member name="P:BlamCore.IO.ProcessMemoryStream.BaseProcess">
            <summary>
                Gets the process that the stream operates on.
            </summary>
        </member>
        <member name="M:BlamCore.IO.StreamUtil.Copy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies data between two different streams.
            </summary>
            <param name="input">The stream to read from.</param>
            <param name="output">The stream to copy the read data to.</param>
            <param name="size">The size of the data to copy.</param>
        </member>
        <member name="M:BlamCore.IO.StreamUtil.Copy(System.IO.Stream,System.Int64,System.Int64,System.Int64)">
            <summary>
            Copies data between two locations in the same stream.
            The source and destination areas may overlap.
            </summary>
            <param name="stream">The stream to copy data in.</param>
            <param name="originalPos">The position of the block of data to copy.</param>
            <param name="targetPos">The position to copy the block to.</param>
            <param name="size">The number of bytes to copy.</param>
        </member>
        <member name="M:BlamCore.IO.StreamUtil.Insert(System.IO.Stream,System.Int32,System.Byte)">
            <summary>
            Inserts space into a stream by copying everything back by a certain number of bytes.
            </summary>
            <param name="stream">The stream to insert space into.</param>
            <param name="size">The size of the space to insert.</param>
            <param name="fill">The byte to fill the inserted space with. See <see cref="M:BlamCore.IO.StreamUtil.Fill(System.IO.Stream,System.Byte,System.Int32)" />.</param>
        </member>
        <member name="M:BlamCore.IO.StreamUtil.Remove(System.IO.Stream,System.Int32)">
            <summary>
            Removes bytes from a stream, moving everything after the bytes to the current position and decreasing the stream length.
            </summary>
            <param name="stream">The stream to remove bytes from.</param>
            <param name="size">The number of bytes to remove.</param>
            <exception cref="T:System.ArgumentException">The size of the data to remove must be >= 0</exception>
        </member>
        <member name="M:BlamCore.IO.StreamUtil.Fill(System.IO.Stream,System.Byte,System.Int32)">
            <summary>
            Fills a section of a stream with a repeating byte.
            </summary>
            <param name="stream">The stream to fill a section of.</param>
            <param name="b">The byte to fill the section with.</param>
            <param name="size">The size of the section to fill.</param>
        </member>
        <member name="M:BlamCore.IO.StreamUtil.Align(System.IO.Stream,System.Int32)">
            <summary>
            Aligns the position of a stream to a power of two, padding the stream with zeroes.
            </summary>
            <param name="stream">The stream.</param>
            <param name="align">The power of two to align to.</param>
        </member>
        <member name="T:BlamCore.Layouts.ArrayTagLayoutField">
            <summary>
            An array of fields in a tag layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.ArrayTagLayoutField.UnderlyingField">
            <summary>
            Gets the repeated field.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.ArrayTagLayoutField.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.AssemblyPluginLoader.LoadPlugin(System.Xml.XmlReader,System.String,BlamCore.Common.Tag)">
            <summary>
            Parses an XML plugin into a <see cref="T:BlamCore.Layouts.TagLayout"/>.
            </summary>
            <param name="reader">The XmlReader to read the plugin XML from.</param>
            <param name="name">The name to give the resulting layout.</param>
            <param name="groupTag">The group tag to give to the resulting layout.</param>
            <returns>The results from loading the plugin.</returns>
        </member>
        <member name="M:BlamCore.Layouts.AssemblyPluginLoader.HandleValueElement(System.Xml.XmlReader,System.String)">
            <summary>
            Handles an element which describes how a value
            should be read from the cache file.
            </summary>
            <param name="reader">The XmlReader that read the element.</param>
            <param name="elementName">The element's name.</param>
        </member>
        <member name="T:BlamCore.Layouts.AssemblyPluginLoadResults">
            <summary>
            Contains the results from loading an Assembly plugin.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.AssemblyPluginLoadResults.Layout">
            <summary>
            The layout that was loaded.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.AssemblyPluginLoadResults.Conflicts">
            <summary>
            Gets a list of any conflicts that occurred.
            Conflicts occur when a field is not at the offset it is expected to be at.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.AssemblyPluginFieldConflict">
            <summary>
            Contains information about a conflict in an Assembly plugin.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.AssemblyPluginFieldConflict.Name">
            <summary>
            Gets the name of the field that caused the conflict.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.AssemblyPluginFieldConflict.Offset">
            <summary>
            Gets the offset of the field that caused the conflict.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.AssemblyPluginFieldConflict.Block">
            <summary>
            Gets the name of the block that the field is in. Can be <c>null</c> if the field is not in a tag block.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.BasicTagLayoutField">
            <summary>
            A basic field in a tag layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.BasicTagLayoutField.Type">
            <summary>
            The field's type.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.BasicFieldType">
            <summary>
            Basic field types that can appear in tag layouts.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.EnumTagLayoutField">
            <summary>
            An enum field in a tag layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.EnumTagLayoutField.Layout">
            <summary>
            The layout of the enum field.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.EnumLayout">
            <summary>
            A layout for an enum in a tag layout.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.EnumLayout.#ctor(System.String,BlamCore.Layouts.BasicFieldType)">
            <summary>
            Creates a named enum layout.
            </summary>
            <param name="name">The name of the layout.</param>
            <param name="underlyingType">The underlying type of the enum. Must be an integer type.</param>
        </member>
        <member name="P:BlamCore.Layouts.EnumLayout.Name">
            <summary>
            Gets the name of the enum.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.EnumLayout.UnderlyingType">
            <summary>
            Gets the underlying type of the enum.
            Must be an integer type.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.EnumLayout.Values">
            <summary>
            Gets a list of the values in the enum.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.EnumLayout.Add(System.String)">
            <summary>
            Adds a value to the enum which follows the last value added.
            If no values are in the enum, its value will be 0.
            </summary>
            <param name="name">The name of the value.</param>
            <returns>The created <see cref="T:BlamCore.Layouts.EnumValue"/>.</returns>
        </member>
        <member name="M:BlamCore.Layouts.EnumLayout.Add(System.String,System.Int32)">
            <summary>
            Adds a value to the enum.
            </summary>
            <param name="name">The name of the value.</param>
            <param name="val">The value.</param>
            <returns>The created <see cref="T:BlamCore.Layouts.EnumValue"/>.</returns>
        </member>
        <member name="M:BlamCore.Layouts.EnumLayout.Add(BlamCore.Layouts.EnumValue)">
            <summary>
            Adds a value to the enum.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:BlamCore.Layouts.EnumLayout.AddRange(System.Collections.Generic.IEnumerable{BlamCore.Layouts.EnumValue})">
            <summary>
            Adds a range of values to the enum.
            </summary>
            <param name="values">The values to add.</param>
        </member>
        <member name="T:BlamCore.Layouts.EnumValue">
            <summary>
            Maps an enum value name to an integer value.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.EnumValue.Name">
            <summary>
            Gets the name of the value.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.EnumValue.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.ITagLayoutFieldVisitor">
            <summary>
            Interface for a tag layout field visitor.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.NamingConvention">
            <summary>
            Provides utility functions for working with naming conventions.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.NamingConvention.ToPascalCase(System.String)">
            <summary>
            Converts a name to pascal case, where words always begin with a capital letter.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The name converted to pascal case.</returns>
        </member>
        <member name="T:BlamCore.Layouts.StringTagLayoutField">
            <summary>
            A string field in a tag layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.StringTagLayoutField.Size">
            <summary>
            The size of the string buffer in bytes.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.TagBlockTagLayoutField">
            <summary>
            A tag block field in a tag layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.TagBlockTagLayoutField.ElementLayout">
            <summary>
            The layout of each element in the tag block.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.TagLayout">
            <summary>
            Holds information about the layout of tag data.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.TagLayout.#ctor(System.String,System.UInt32)">
            <summary>
            Creates a tag layout with a name and a size in bytes.
            It will not have a group tag associated with it.
            </summary>
            <param name="name">The name of the layout.</param>
            <param name="size">The size of the layout in bytes.</param>
        </member>
        <member name="M:BlamCore.Layouts.TagLayout.#ctor(System.String,System.UInt32,BlamCore.Common.Tag)">
            <summary>
            Creates a tag layout with a name, a size in bytes, and a group tag.
            </summary>
            <param name="name">The name of the layout.</param>
            <param name="size">The size of the layout.</param>
            <param name="groupTag">The group tag.</param>
        </member>
        <member name="P:BlamCore.Layouts.TagLayout.Name">
            <summary>
            Gets the name of the layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.TagLayout.Size">
            <summary>
            The size of the tag data structure in bytes.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.TagLayout.GroupTag">
            <summary>
            The layout's group tag (or 0 for none).
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.TagLayout.Fields">
            <summary>
            Gets a list of fields in the layout.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.TagLayout.Add(BlamCore.Layouts.TagLayoutField)">
            <summary>
            Adds a field to the layout.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:BlamCore.Layouts.TagLayout.AddRange(System.Collections.Generic.IEnumerable{BlamCore.Layouts.TagLayoutField})">
            <summary>
            Adds a range of fields to the layout.
            </summary>
            <param name="fields">The fields to add.</param>
        </member>
        <member name="M:BlamCore.Layouts.TagLayout.Accept(BlamCore.Layouts.ITagLayoutFieldVisitor)">
            <summary>
            Visits each field in the tag layout.
            </summary>
            <param name="visitor">The visitor to use.</param>
        </member>
        <member name="T:BlamCore.Layouts.TagLayoutField">
            <summary>
            Base class for a field in a tag layout.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.TagLayoutField.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:BlamCore.Layouts.TagLayoutField.DataAlign">
            <summary>
            The power of two to align the field's data on.
            Only applicable to fields which contain pointers.
            Can be 0 if not set.
            </summary>
        </member>
        <member name="T:BlamCore.Layouts.TagLayoutWriter">
            <summary>
            Base for a class which can write tag layouts to files.
            </summary>
        </member>
        <member name="M:BlamCore.Layouts.TagLayoutWriter.GetSuggestedFileName(BlamCore.Layouts.TagLayout)">
            <summary>
            Gets the suggested filename for a layout.
            </summary>
            <param name="layout">The layout.</param>
            <returns>A suggested filename to write the layout to.</returns>
        </member>
        <member name="M:BlamCore.Layouts.TagLayoutWriter.WriteLayout(BlamCore.Layouts.TagLayout,System.IO.TextWriter)">
            <summary>
            Writes a layout to a stream.
            </summary>
            <param name="layout">The layout to write.</param>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:BlamCore.Layouts.TagLayoutWriter.WriteLayout(BlamCore.Layouts.TagLayout,System.String)">
            <summary>
            Writes a layout to a file.
            </summary>
            <param name="layout">The layout to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="T:BlamCore.Common.Angle">
            <summary>
            An angle value.
            </summary>
        </member>
        <member name="F:BlamCore.Common.Angle.UnitConversion">
            <summary>
            The value used to convert between degrees and radians.
            </summary>
        </member>
        <member name="P:BlamCore.Common.Angle.Radians">
            <summary>
            Gets the angle's value in radians.
            </summary>
        </member>
        <member name="P:BlamCore.Common.Angle.Degrees">
            <summary>
            Gets the angle's value in degrees.
            </summary>
        </member>
        <member name="M:BlamCore.Common.Angle.FromRadians(System.Single)">
            <summary>
            Creates a new angle from radians.
            </summary>
            <param name="radians">The radians of the angle.</param>
            <returns>The angle that was created.</returns>
        </member>
        <member name="M:BlamCore.Common.Angle.FromDegrees(System.Single)">
            <summary>
            Creates a new angle from degrees.
            </summary>
            <param name="degrees">The degrees of the angle.</param>
            <returns>The angle that was created.</returns>
        </member>
        <member name="M:BlamCore.Common.ArrayUtil.Replace(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Reallocates an array, replacing a block of data in it.
            </summary>
            <param name="oldData">The array of data to replace a block in.</param>
            <param name="index">The starting index of the block to replace.</param>
            <param name="length">The length of the block to replace.</param>
            <param name="newData">The data to replace the block with.</param>
            <returns></returns>
        </member>
        <member name="P:BlamCore.Common.Bounds`1.Lower">
            <summary>
            Gets the lowerimum value within the range.
            </summary>
        </member>
        <member name="P:BlamCore.Common.Bounds`1.Upper">
            <summary>
            Gets the upperimum value within the range.
            </summary>
        </member>
        <member name="M:BlamCore.Common.Bounds`1.#ctor(`0,`0)">
            <summary>
            Creates a new range from a lowerimum and a upperimum value.
            </summary>
            <param name="lower">The lowerimum value of the range.</param>
            <param name="upper">The upperimum value of the range.</param>
        </member>
        <member name="M:BlamCore.Common.Bounds`1.Contains(`0)">
            <summary>
            Deterloweres whether the range contains a value.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if the value is inside the range.</returns>
        </member>
        <member name="T:BlamCore.Common.GameLanguage">
            <summary>
            Game language indices.
            </summary>
        </member>
        <member name="T:BlamCore.Common.ReadOnlySet`1">
            <summary>
            Implements a read-only wrapper for a set.
            </summary>
            <remarks>
            Starting in .NET 4.6, HashSet implements IReadOnlyCollection.
            This is a quick workaround for earlier versions of .NET.
            </remarks>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Constructs a read-only wrapper around a set.
            </summary>
            <param name="baseSet">The base set.</param>
        </member>
        <member name="P:BlamCore.Common.ReadOnlySet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:BlamCore.Common.ReadOnlySet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.Add(`0)">
            <summary>
            Adds an element to the current set and returns a value to indicate if the element was successfully added.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>
            true if the element is added to the set; false if the element is already in the set.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a proper subset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a proper superset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a subset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a superset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is equal to <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BlamCore.Common.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:BlamCore.Common.RealPlane2d">
            <summary>
            A 2-dimensional plane in real space.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane2d.Normal">
            <summary>
            The direction normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane2d.Distance">
            <summary>
            The distance along the plane's normal vector from the origin.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane2d.I">
            <summary>
            The I component of the normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane2d.J">
            <summary>
            The J component of the normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane2d.D">
            <summary>
            The distance along the plane's normal vector from the origin.
            </summary>
        </member>
        <member name="M:BlamCore.Common.RealPlane2d.#ctor(BlamCore.Common.RealVector2d,System.Single)">
            <summary>
            Creates a new <see cref="T:BlamCore.Common.RealPlane2d"/>.
            </summary>
            <param name="normal">The normal vector of the plane.</param>
            <param name="distance">The distance of the plane.</param>
        </member>
        <member name="M:BlamCore.Common.RealPlane2d.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:BlamCore.Common.RealPlane2d"/>.
            </summary>
            <param name="i">The I component of the normal vector of the plane.</param>
            <param name="j">The J component of the normal vector of the plane.</param>
            <param name="d">The distance of the plane.</param>
        </member>
        <member name="M:BlamCore.Common.RealPlane2d.Equals(BlamCore.Common.RealPlane2d)">
            <summary>
            Determines if the current instance is equal to another <see cref="T:BlamCore.Common.RealPlane2d"/>.
            </summary>
            <param name="other">The other plane.</param>
            <returns></returns>
        </member>
        <member name="T:BlamCore.Common.RealPlane3d">
            <summary>
            A 2-dimensional plane in real space.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane3d.Normal">
            <summary>
            The direction normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane3d.Distance">
            <summary>
            The distance along the plane's normal vector from the origin.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane3d.I">
            <summary>
            The I component of the normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane3d.J">
            <summary>
            The J component of the normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane3d.K">
            <summary>
            The K component of the normal vector of the plane.
            </summary>
        </member>
        <member name="P:BlamCore.Common.RealPlane3d.D">
            <summary>
            The distance along the plane's normal vector from the origin.
            </summary>
        </member>
        <member name="M:BlamCore.Common.RealPlane3d.#ctor(BlamCore.Common.RealVector3d,System.Single)">
            <summary>
            Creates a new <see cref="T:BlamCore.Common.RealPlane3d"/>.
            </summary>
            <param name="normal">The normal vector of the plane.</param>
            <param name="distance">The distance of the plane.</param>
        </member>
        <member name="M:BlamCore.Common.RealPlane3d.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:BlamCore.Common.RealPlane3d"/>.
            </summary>
            <param name="i">The I component of the normal vector of the plane.</param>
            <param name="j">The J component of the normal vector of the plane.</param>
            <param name="k">The K component of the normal vector of the plane.</param>
            <param name="d">The distance of the plane.</param>
        </member>
        <member name="M:BlamCore.Common.RealPlane3d.Equals(BlamCore.Common.RealPlane3d)">
            <summary>
            Determines if the current instance is equal to another <see cref="T:BlamCore.Common.RealPlane3d"/>.
            </summary>
            <param name="other">The other plane.</param>
            <returns></returns>
        </member>
        <member name="T:BlamCore.Common.StringId">
            <summary>
            A constant ID representing a debug string.
            </summary>
        </member>
        <member name="F:BlamCore.Common.StringId.Null">
            <summary>
            A null stringID.
            </summary>
        </member>
        <member name="M:BlamCore.Common.StringId.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new StringID from a set and an index.
            </summary>
            <param name="set">The set the stringID belongs to.</param>
            <param name="index">The index of the stringID within the set.</param>
        </member>
        <member name="M:BlamCore.Common.StringId.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new StringID from a length, a set, and an index.
            </summary>
            <param name="length">The length of the string.</param>
            <param name="set">The set the stringID belongs to.</param>
            <param name="index">The index of the stringID within the set.</param>
        </member>
        <member name="M:BlamCore.Common.StringId.#ctor(System.UInt32)">
            <summary>
            Constructs a new StringID from a 32-bit value.
            </summary>
            <param name="value">The 32-bit value of the stringID.</param>
        </member>
        <member name="P:BlamCore.Common.StringId.Value">
            <summary>
            Gets the value of the stringID as a 32-bit integer.
            </summary>
        </member>
        <member name="P:BlamCore.Common.StringId.Length">
            <summary>
            Gets the length component of the stringID.
            </summary>
        </member>
        <member name="P:BlamCore.Common.StringId.Set">
            <summary>
            Gets the set component of the stringID.
            </summary>
        </member>
        <member name="P:BlamCore.Common.StringId.Index">
            <summary>
            Gets the index component of the stringID.
            Note that this is not a direct index into the string list and must be translated first!
            </summary>
        </member>
        <member name="T:BlamCore.Common.Tag">
            <summary>
            Represents a magic number which looks like a string.
            </summary>
        </member>
        <member name="P:BlamCore.Common.Tag.Null">
            <summary>
            The null tag representation.
            </summary>
        </member>
        <member name="M:BlamCore.Common.Tag.#ctor(System.Int32)">
            <summary>
            Constructs a magic number from an integer.
            </summary>
            <param name="val">The integer.</param>
        </member>
        <member name="M:BlamCore.Common.Tag.#ctor(System.String)">
            <summary>
            Constructs a magic number from a string.
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="F:BlamCore.Common.Tag.Value">
            <summary>
            Gets the value of the magic number as an integer.
            </summary>
        </member>
        <member name="M:BlamCore.Common.Tag.ToString">
            <summary>
            Converts the magic number into its string representation.
            </summary>
            <returns>The string that the magic number looks like.</returns>
        </member>
        <member name="T:BlamCore.Common.TagCacheMap">
            <summary>
            A lookup table which can be used to find a tag's equivalents in different game versions.
            </summary>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.Add(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Connects a tag index to a tag in another version.
            </summary>
            <param name="version1">The first version.</param>
            <param name="index1">The tag index in the first version.</param>
            <param name="version2">The second version.</param>
            <param name="index2">The tag index in the second version.</param>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.Translate(System.String,System.Int32,System.String)">
            <summary>
            Translates a tag index between two versions.
            </summary>
            <param name="version1">The version of the index to translate.</param>
            <param name="index1">The tag index.</param>
            <param name="version2">The version to get the equivalent tag index in.</param>
            <returns>The equivalent tag index if found, or -1 otherwise.</returns>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.WriteCsv(System.IO.TextWriter)">
            <summary>
            Writes the map out to a CSV.
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.ParseCsv(System.IO.TextReader)">
            <summary>
            Parses a map from a CSV.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The map that was read.</returns>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.VersionMap.GetGlobalTagIndex(System.Int32)">
            <summary>
            Converts a tag to a global tag index which can be used to look up the tag in another version.
            </summary>
            <param name="tag">The index of the tag for this version.</param>
            <returns>An index which can be passed to <see cref="M:BlamCore.Common.TagCacheMap.VersionMap.GetVersionedTagIndex(System.Int32)"/> for any version, or -1 if the tag was not found.</returns>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.VersionMap.GetVersionedTagIndex(System.Int32)">
            <summary>
            Converts a global tag index to a tag index for this version.
            </summary>
            <param name="globalIndex">The global tag index returned by <see cref="M:BlamCore.Common.TagCacheMap.VersionMap.GetGlobalTagIndex(System.Int32)"/> for this version.</param>
            <returns>The tag's index in this version, or -1 if not found.</returns>
        </member>
        <member name="M:BlamCore.Common.TagCacheMap.VersionMap.Add(System.Int32,System.Int32)">
            <summary>
            Adds a mapping between a global tag index and a versioned tag index.
            </summary>
            <param name="globalIndex">The global tag index.</param>
            <param name="versionedIndex">The tag's index in this version.</param>
        </member>
        <member name="T:BlamCore.Common.TagGroup">
            <summary>
            Describes the type of data in a tag.
            </summary>
        </member>
        <member name="M:BlamCore.Common.TagGroup.#ctor">
            <summary>
            Constructs an empty tag group description.
            </summary>
        </member>
        <member name="M:BlamCore.Common.TagGroup.#ctor(BlamCore.Common.Tag,BlamCore.Common.Tag,BlamCore.Common.Tag,BlamCore.Common.StringId)">
            <summary>
            Constructs a new tag group description.
            </summary>
            <param name="tag">The group's tag.</param>
            <param name="parentTag">The parent group's tag. Can be -1.</param>
            <param name="grandparentTag">The grandparent group's tag. Can be -1.</param>
            <param name="name">The group's name stringID.</param>
        </member>
        <member name="F:BlamCore.Common.TagGroup.Null">
            <summary>
            Represents a "null" tag group.
            </summary>
        </member>
        <member name="P:BlamCore.Common.TagGroup.Instances">
            <summary>
            A dictionary of available tag groups.
            </summary>
        </member>
        <member name="F:BlamCore.Common.TagGroup.Tag">
            <summary>
            Gets the group's tag. Can be -1.
            </summary>
        </member>
        <member name="F:BlamCore.Common.TagGroup.ParentTag">
            <summary>
            Gets the parent group's tag. Can be -1.
            </summary>
        </member>
        <member name="F:BlamCore.Common.TagGroup.GrandparentTag">
            <summary>
            Gets the grandparent group's tag. Can be -1.
            </summary>
        </member>
        <member name="F:BlamCore.Common.TagGroup.Name">
            <summary>
            Gets the group's name stringID.
            </summary>
        </member>
        <member name="M:BlamCore.Common.TagGroup.BelongsTo(BlamCore.Common.TagGroup)">
            <summary>
            Determines whether this group is a subgroup of another group.
            </summary>
            <param name="group">The group to check.</param>
            <returns><c>true</c> if this group is a subgroup of the other group.</returns>
        </member>
        <member name="M:BlamCore.Common.TagGroup.BelongsTo(System.String)">
            <summary>
            Determines whether this group is a subgroup of another group.
            </summary>
            <param name="groupTag">The group tag to check, as a 4-character string.</param>
            <returns><c>true</c> if this group is a subgroup of the group tag.</returns>
        </member>
        <member name="M:BlamCore.Common.TagGroup.BelongsTo(BlamCore.Common.Tag)">
            <summary>
            Determines whether this group is a subgroup of another group.
            </summary>
            <param name="groupTag">The group tag to check.</param>
            <returns><c>true</c> if this group is a subgroup of the group tag.</returns>
        </member>
        <member name="T:BlamCore.Common.TagVersionMap">
            <summary>
            A lookup table which can be used to find a tag's equivalents in different game versions.
            </summary>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.Add(BlamCore.Cache.CacheVersion,System.Int32,BlamCore.Cache.CacheVersion,System.Int32)">
            <summary>
            Connects a tag index to a tag in another version.
            </summary>
            <param name="version1">The first version.</param>
            <param name="index1">The tag index in the first version.</param>
            <param name="version2">The second version.</param>
            <param name="index2">The tag index in the second version.</param>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.Translate(BlamCore.Cache.CacheVersion,System.Int32,BlamCore.Cache.CacheVersion)">
            <summary>
            Translates a tag index between two versions.
            </summary>
            <param name="version1">The version of the index to translate.</param>
            <param name="index1">The tag index.</param>
            <param name="version2">The version to get the equivalent tag index in.</param>
            <returns>The equivalent tag index if found, or -1 otherwise.</returns>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.WriteCsv(System.IO.TextWriter)">
            <summary>
            Writes the map out to a CSV.
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.ParseTagVersionMap(System.IO.TextReader)">
            <summary>
            Parses a map from a CSV.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The map that was read.</returns>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.VersionMap.GetGlobalTagIndex(System.Int32)">
            <summary>
            Converts a tag to a global tag index which can be used to look up the tag in another version.
            </summary>
            <param name="tag">The index of the tag for this version.</param>
            <returns>An index which can be passed to <see cref="M:BlamCore.Common.TagVersionMap.VersionMap.GetVersionedTagIndex(System.Int32)"/> for any version, or -1 if the tag was not found.</returns>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.VersionMap.GetVersionedTagIndex(System.Int32)">
            <summary>
            Converts a global tag index to a tag index for this version.
            </summary>
            <param name="globalIndex">The global tag index returned by <see cref="M:BlamCore.Common.TagVersionMap.VersionMap.GetGlobalTagIndex(System.Int32)"/> for this version.</param>
            <returns>The tag's index in this version, or -1 if not found.</returns>
        </member>
        <member name="M:BlamCore.Common.TagVersionMap.VersionMap.Add(System.Int32,System.Int32)">
            <summary>
            Adds a mapping between a global tag index and a versioned tag index.
            </summary>
            <param name="globalIndex">The global tag index.</param>
            <param name="versionedIndex">The tag's index in this version.</param>
        </member>
        <member name="T:BlamCore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.Builds">
            <summary>
              Looks up a localized string similar to &lt;builds&gt;
             &lt;build string=&quot;01.01.14.2342&quot;
                    inherits=&quot;&quot;
                    headerSize=&quot;0&quot;
                    tagsKey=&quot;&quot;
                    stringsKey=&quot;&quot;
                    localesKey=&quot;&quot;
                    networkKey=&quot;&quot;
                    version=&quot;Halo1&quot;
                    plugins=&quot;Halo1&quot;
                    definitions=&quot;Halo1Xbox&quot;
                    vertDef=&quot;&quot;
                    stringMods=&quot;0,0&quot;
                    localesStart=&quot;0&quot;
                    languageCount=&quot;0&quot;
                    languageSize=&quot;0&quot; /&gt;
             &lt;build string=&quot;01.00.00.0564&quot;
                    inherits=&quot;&quot;
                    headerSize=&quot;0&quot;
                    tagsKey=&quot;&quot;
                     [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.Classes_H1">
            <summary>
              Looks up a localized string similar to &lt;classes&gt;
             &lt;class code=&quot;actr&quot; name=&quot;actor&quot; /&gt;
             &lt;class code=&quot;actv&quot; name=&quot;actor_variant&quot; /&gt;
             &lt;class code=&quot;ant!&quot; name=&quot;antenna&quot; /&gt;
             &lt;class code=&quot;antr&quot; name=&quot;model_animations&quot; /&gt;
             &lt;class code=&quot;bipd&quot; name=&quot;biped&quot; /&gt;
             &lt;class code=&quot;bitm&quot; name=&quot;bitmap&quot; /&gt;
             &lt;class code=&quot;boom&quot; name=&quot;spheroid&quot; /&gt;
             &lt;class code=&quot;cdmg&quot; name=&quot;continuous_damage_effect&quot; /&gt;
             &lt;class code=&quot;coll&quot; name=&quot;model_collision_geometry&quot; /&gt;
             &lt;class code=&quot;colo&quot; name=&quot;color_table&quot; /&gt;
             &lt;class code=&quot;cont&quot; name=&quot;contrail&quot; /&gt;
             &lt;class co [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.Classes_H2">
            <summary>
              Looks up a localized string similar to &lt;classes&gt;
             &lt;class code=&quot;*cen&quot; name=&quot;scenario_scenery_resource&quot; /&gt;
             &lt;class code=&quot;*eap&quot; name=&quot;scenario_weapons_resource&quot; /&gt;
             &lt;class code=&quot;*ehi&quot; name=&quot;scenario_vehicles_resource&quot; /&gt;
             &lt;class code=&quot;*fsc&quot; name=&quot;scenario_effect_scenery_resource&quot; /&gt;
             &lt;class code=&quot;*igh&quot; name=&quot;scenario_lights_resource&quot; /&gt;
             &lt;class code=&quot;*ipd&quot; name=&quot;scenario_bipeds_resource&quot; /&gt;
             &lt;class code=&quot;*qip&quot; name=&quot;scenario_equipment_resource&quot; /&gt;
             &lt;class code=&quot;*rea&quot; name=&quot;scenario_creature_resource&quot; /&gt;
             &lt;class code=&quot;*sce&quot; name=&quot;s [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.Versions">
            <summary>
              Looks up a localized string similar to &lt;versions&gt;
             &lt;version name=&quot;Halo1&quot;&gt;
               &lt;header/&gt;
               &lt;indexheader/&gt;
             &lt;/version&gt;
             &lt;version name=&quot;Halo2Xbox&quot;&gt;
               &lt;header
            		fileSize=&quot;8&quot;
            		indexOffset=&quot;16&quot;
                 tagDataAddress=&quot;20&quot;
            		stringCount=&quot;356&quot;
            		stringTableSize=&quot;360&quot;
            		stringTableIndexOffset=&quot;364&quot;
            		stringTableOffset=&quot;368&quot;
            		scenarioName=&quot;444&quot;
            		fileCount=&quot;704&quot;
            		fileTableOffset=&quot;708&quot;
            		fileTableSize=&quot;712&quot;
            		fileTableIndexOffset=&quot;716&quot; /&gt;
               &lt;indexheader
            		tagClassCount=&quot;4&quot;
            		tagInfoOffset=&quot;8&quot; /&gt;
             &lt;/version&gt;
              [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:BlamCore.Properties.Resources.VertexBuffer">
            <summary>
              Looks up a localized string similar to &lt;VertexDefinitions&gt;
             &lt;vertexTypes Game=&quot;Halo3&quot;&gt;
            	&lt;vertex type=&quot;0x00&quot; name=&quot;s_world_vertex&quot;&gt;
            		&lt;value stream=&quot;0&quot; offset=&quot;0x0&quot; type=&quot;Float32_3&quot; usage=&quot;position&quot; usageIndex=&quot;0&quot; /&gt;
            		&lt;value stream=&quot;0&quot; offset=&quot;0xC&quot; type=&quot;Float32_2&quot; usage=&quot;texcoords&quot; usageIndex=&quot;0&quot; /&gt;
            		&lt;value stream=&quot;0&quot; offset=&quot;0x14&quot; type=&quot;DHenN3&quot; usage=&quot;normal&quot; usageIndex=&quot;0&quot; /&gt;
            		&lt;value stream=&quot;0&quot; offset=&quot;0x18&quot; type=&quot;DHenN3&quot; usage=&quot;tangent&quot; usageIndex=&quot;0&quot; /&gt;
            		&lt;value stream=&quot;0&quot; offset=&quot;0x1C&quot; type=&quot;DHenN3&quot; usage=&quot;binormal&quot; usageIn [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:BlamCore.Serialization.IDataBlock">
            <summary>
            Interface for a block of data being serialized.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.IDataBlock.Stream">
            <summary>
            Gets the stream open on the data block.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.IDataBlock.Writer">
            <summary>
            Gets the writer open on the data block's stream.
            </summary>
        </member>
        <member name="M:BlamCore.Serialization.IDataBlock.WritePointer(System.UInt32,System.Type)">
            <summary>
            Writes a pointer to an object at the current position in the block.
            </summary>
            <param name="targetOffset">The target offset.</param>
            <param name="type">The type of object that the pointer will point to.</param>
        </member>
        <member name="M:BlamCore.Serialization.IDataBlock.PreSerialize(BlamCore.Serialization.TagFieldAttribute,System.Object)">
            <summary>
            Called before an object is serialized into the block.
            </summary>
            <param name="info">Information about the tag element.</param>
            <param name="obj">The object intended to be serialized.</param>
            <returns>The object which should actually be serialized.</returns>
        </member>
        <member name="M:BlamCore.Serialization.IDataBlock.SuggestAlignment(System.UInt32)">
            <summary>
            Suggests a power of two to align the block on.
            </summary>
            <param name="align">The power of two to suggest.</param>
        </member>
        <member name="M:BlamCore.Serialization.IDataBlock.Finalize(System.IO.Stream)">
            <summary>
            Finalizes the block, writing it out to a stream.
            </summary>
            <param name="outStream">The output stream.</param>
            <returns>The offset of the block within the output stream.</returns>
        </member>
        <member name="T:BlamCore.Serialization.ISerializationContext">
            <summary>
            A context for serializing or deserializing tag data.
            </summary>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.BeginSerialize(BlamCore.Serialization.TagStructureInfo)">
            <summary>
            Begins serializing tag data.
            </summary>
            <param name="info">Information about the structure that is being serialized.</param>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.EndSerialize(BlamCore.Serialization.TagStructureInfo,System.Byte[],System.UInt32)">
            <summary>
            Finishes serializing tag data.
            </summary>
            <param name="info">Information about the structure that was serialized.</param>
            <param name="data">The data that was serialized.</param>
            <param name="mainStructOffset">The offset of the main structure within the data.</param>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.BeginDeserialize(BlamCore.Serialization.TagStructureInfo)">
            <summary>
            Begins deserializing tag data.
            </summary>
            <param name="info">Information about the structure that is being deserialized.</param>
            <returns>The reader to read from.</returns>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.EndDeserialize(BlamCore.Serialization.TagStructureInfo,System.Object)">
            <summary>
            Finishes deserializing tag data.
            </summary>
            <param name="info">Information about the structure that was deserialized.</param>
            <param name="obj">The resulting object.</param>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.AddressToOffset(System.UInt32,System.UInt32)">
            <summary>
            Converts an address to an offset.
            </summary>
            <param name="currentOffset">The offset that the address is located at.</param>
            <param name="address">The address to convert.</param>
            <returns>The offset corresponding to the address.</returns>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.GetTagByIndex(System.Int32)">
            <summary>
            Looks up a tag by its index.
            </summary>
            <param name="index">The index of the tag to get.</param>
            <returns>The tag if it exists, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.Serialization.ISerializationContext.CreateBlock">
            <summary>
            Creates a data block.
            </summary>
            <returns>The created block.</returns>
        </member>
        <member name="T:BlamCore.Serialization.MaxVersionAttribute">
            <summary>
            Attribute indicating the last engine version in which a tag element is present.
            </summary>
        </member>
        <member name="T:BlamCore.Serialization.MinVersionAttribute">
            <summary>
            Attribute indicating the first engine version in which a tag element is present.
            </summary>
        </member>
        <member name="T:BlamCore.Serialization.TagFieldAttribute">
            <summary>
            Attribute for automatically-serializable values in a tag.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Offset">
            <summary>
            The offset of the value from the beginning of the structure.
            If this is -1 (default), then the current stream position will be used.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Size">
            <summary>
            The size of the value in bytes.
            If this is 0 (default), then the size will be inferred from the value type.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Count">
            <summary>
            If the value is an inline array, gets or sets the number of elements in the array.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Padding">
            <summary>
            Determines if the tag field is a padding value.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Length">
            <summary>
            If the value is a string, gets or sets the maximum number of characters in the string (including the null terminator).
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Flags">
            <summary>
            Gets or sets flags for the tag element.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldAttribute.Align">
            <summary>
            The power of two to align the field's data to.
            Only applicable to fields which contain pointers.
            </summary>
        </member>
        <member name="T:BlamCore.Serialization.TagFieldFlags">
            <summary>
            Tag element flags.
            </summary>
        </member>
        <member name="F:BlamCore.Serialization.TagFieldFlags.Indirect">
            <summary>
            The tag element is a pointer to a structure.
            </summary>
        </member>
        <member name="F:BlamCore.Serialization.TagFieldFlags.Short">
            <summary>
            The tag element is "short" and doesn't have debug info. Currently only valid for tag references.
            </summary>
        </member>
        <member name="T:BlamCore.Serialization.TagFieldEnumerator">
            <summary>
            Allows easy enumeration over a tag structure's elements and filtering by version.
            </summary>
        </member>
        <member name="M:BlamCore.Serialization.TagFieldEnumerator.#ctor(BlamCore.Serialization.TagStructureInfo)">
            <summary>
            Constructs an enumerator over a tag structure.
            </summary>
            <param name="info">The info for the structure. Only fields which match the version used to create the info will be enumerated over.</param>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldEnumerator.Info">
            <summary>
            Gets the info that was used to construct the enumerator.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldEnumerator.Field">
            <summary>
            Gets information about the current field.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldEnumerator.Attribute">
            <summary>
            Gets the current property's <see cref="T:BlamCore.Serialization.TagFieldAttribute"/>.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldEnumerator.MinVersion">
            <summary>
            Gets the lowest engine version which supports this property, or <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/> if unbounded.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagFieldEnumerator.MaxVersion">
            <summary>
            Gets the highest engine version which supports this property, or <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/> if unbounded.
            </summary>
        </member>
        <member name="M:BlamCore.Serialization.TagFieldEnumerator.Next">
            <summary>
            Moves to the next tag field in the structure.
            This must be called before accessing any of the other properties.
            </summary>
            <returns><c>true</c> if the enumerator moved to a new element, or <c>false</c> if the end of the structure has been reached.</returns>
        </member>
        <member name="T:BlamCore.Serialization.TagStructureAttribute">
            <summary>
            Attribute for a serializable structure in a tag.
            If a structure has more than one of these attributes, then all attributes with version restrictions will be checked first.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.Align">
            <summary>
            The power of two to align the block to.
            Can be 0 if not set.
            </summary>
            <remarks>
            Note that this value is only a guide for the serializer, and a
            different alignment may actually be used if necessary.
            </remarks>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.Size">
            <summary>
            The size of the structure in bytes, NOT including parent structures.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.MaxElements">
            <summary>
            The maximum number of elements allowed for a tag block using the structure.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.Name">
            <summary>
            The internal name of the structure.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.Tag">
            <summary>
            The name of the tag group that the structure applies to.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.MinVersion">
            <summary>
            The minimum engine version which the structure applies to.
            Can be <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/> (default) if unbounded.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureAttribute.MaxVersion">
            <summary>
            The maximum engine version which the structure applies to.
            Can be <see cref="F:BlamCore.Cache.CacheVersion.Unknown"/> (default) if unbounded.
            </summary>
        </member>
        <member name="T:BlamCore.Serialization.TagStructureInfo">
            <summary>
            Utility class for analyzing a tag structure type's inheritance hierarchy.
            </summary>
        </member>
        <member name="M:BlamCore.Serialization.TagStructureInfo.#ctor(System.Type)">
            <summary>
            Constructs a <see cref="T:BlamCore.Serialization.TagStructureInfo"/> object which contains info about a tag structure type.
            </summary>
            <param name="structureType">The tag structure type to analyze.</param>
        </member>
        <member name="M:BlamCore.Serialization.TagStructureInfo.#ctor(System.Type,BlamCore.Cache.CacheVersion)">
            <summary>
            Constructs a <see cref="T:BlamCore.Serialization.TagStructureInfo"/> object which contains info about a tag structure type.
            </summary>
            <param name="structureType">The tag structure type to analyze.</param>
            <param name="version">The engine version to compare attributes against.</param>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.Version">
            <summary>
            Gets the engine version that was used to construct the info object.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.Types">
            <summary>
            Gets the structure types in the structure's inheritance hierarchy in order from child to base.
            Types which do not have a matching TagStructure attribute will not be included in this list.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.TotalSize">
            <summary>
            Gets the total size of the structure, including parent structures.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.Structure">
            <summary>
            Gets the current <see cref="T:BlamCore.Serialization.TagStructureAttribute"/>.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.GroupTag">
            <summary>
            Gets the group tag for the structure, or -1 if none.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.ParentGroupTag">
            <summary>
            Gets the parent group tag for the structure, or -1 if none.
            </summary>
        </member>
        <member name="P:BlamCore.Serialization.TagStructureInfo.GrandparentGroupTag">
            <summary>
            Gets the grandparent group tag for the structure, or -1 if none.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.AreaScreenEffect.ScreenEffectBlock.MaximumDistance">
            <summary>
            The maximum distance this screen effect will affect.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.AreaScreenEffect.ScreenEffectBlock.DistanceFalloffFunction">
            <summary>
            The function data of the distance falloff.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.AreaScreenEffect.ScreenEffectBlock.Duration">
            <summary>
            The effect is destroyed after this many seconds. (0 = never dies)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.AreaScreenEffect.ScreenEffectBlock.TimeEvolutionFunction">
            <summary>
            The function data of the time evolution.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.AreaScreenEffect.ScreenEffectBlock.AngleFalloffFunction">
            <summary>
            The function data of the angle falloff.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Usage">
            <summary>
            Choose how you are using this bitmap
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Flags">
            <summary>
            The runtime flags of this bitmap
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.SpriteSpacing">
            <summary>
            Number of pixels between adjacent sprites (0 uses default, negative numbers set no spacing)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.UsageOverride.SourceGamma">
            <summary>
            0.0 to use xenon curve (default)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Signature">
            <summary>
            The group tag signature of the image.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Width">
            <summary>
            Pixels; DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Height">
            <summary>
            Pixels; DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Depth">
            <summary>
            Pixels; DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.XboxFlags">
            <summary>
            The xbox 360 flags of the bitmap image. DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Type">
            <summary>
            The type of the bitmap image. DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.FourTimesLog2Size">
            <summary>
            DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Format">
            <summary>
            The format of the bitmap image. DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Flags">
            <summary>
            The flags of the bitmap image. DO NOT CHANGE
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.RegistrationPoint">
            <summary>
            The 'center' of the bitmap - i.e. for particles
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.MipmapCount">
            <summary>
            DO NOT CHANGE (not counting the highest resolution)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Bitmap.Image.Curve">
            <summary>
            How to convert from pixel value to linear.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.Creature">
            <summary>
            Creature reference for swarm characters ONLY
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralPropertyFlags.ArmorPreventsAssassination">
            <summary>
            Non-depleted ai-tracked damage sections prevent instant melee kills.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralPropertyFlags.DropAllWeaponsOnDeath">
            <summary>
            The default is to drop only the currently equipped weapon.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralPropertyFlags.DropNoWeaponsOnDeath">
            <summary>
            This will override 'drop all weapons'.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralPropertyFlags.ShieldPreventsAssassination">
            <summary>
            Cannot be assassinated unless its shield has been depleted.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralPropertyFlags.CannotBeAssassinated">
            <summary>
            This overrides all other character assassination modifications.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralProperty.Rank">
            <summary>
            The rank of this character, helps determine who should be a squad leader. (0 is lowly, 32767 is highest)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralProperty.FollowerPositioning">
            <summary>
            Where should my followers try and position themselves when I am their leader?
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralProperty.MaximumLeaderDistance">
            <summary>
            Don't let my combat range get outside this distance from my leader when in combat. (if 0 then defaults to 4wu)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralProperty.MaximumPlayerDialogueDistance">
            <summary>
            Never play dialogue if all players are outside of this range. (if 0 then defaults to 20wu)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.GeneralProperty.Scariness">
            <summary>
            The inherent scariness of the character.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.CombatformProperty.BerserkDistance">
            <summary>
            Distance at which the combatform will be forced into berserking.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.CombatformProperty.BerserkChance">
            <summary>
            Chance of which the combatform will be forced into berserking this second.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.DeathHeight">
            <summary>
            World Units; The amount that the engineer attempts to rise before dying.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.DeathRiseTime">
            <summary>
            Seconds; The amount of time that the engineer spends rising before dying.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.DeathDetonationTime">
            <summary>
            Seconds; The amount of time that the engineer spends detonating on death.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.ShieldBoostRadius">
            <summary>
            The radius that the engineer boosts the shields of allies during combat.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.ShieldBoostPeriod">
            <summary>
            Seconds; The time within the shield boost pings of the engineer.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.ShieldBoostDamageSectionName">
            <summary>
            The name of the damage section which will be activated by the engineer shield boost.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.ProximityRadius">
            <summary>
            World Units; If target enters within this radius, either detonate or deploy equipment.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.ProximityDetonationChance">
            <summary>
            The chance that the engineer will detonate if target enters the drain radius.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.EngineerProperty.ProximityEquipment">
            <summary>
            The equipment that the engineer deploys if target enters radius and detonation is not chosen.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.InspectProperty.StopDistance">
            <summary>
            World Units; Distance from object at which to stop and turn on the inspection light.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.InspectProperty.InspectTime">
            <summary>
            Seconds; The time which we should inspect each object for.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.InspectProperty.SearchRange">
            <summary>
            World Units; Range in which we should search for objects to inspect
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Character.WeaponFlags.ForceAimFromBarrelPosition">
            <summary>
            Use only for weapons with really, really long barrels (bfg),
            do NOT use for rotating turret weapons (warthog, falcon, etc)
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.GiantFlags">
            <summary>
            The flags of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.AccelerationTime">
            <summary>
            The acceleration time of the giant in seconds.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.DecelerationTime">
            <summary>
            The deceleration time of the giant in seconds.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.SpeedScale">
            <summary>
            The overall animation speed scale of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.ElevationChangeRate">
            <summary>
            The elevation change rate scale per update of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.FootTargetRadius">
            <summary>
            How far around a foot to search for ground targets to stomp. Set to 0 to not search for targets.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSettings">
            <summary>
            The buckle settings of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.AnkleIkScale">
            <summary>
            The lower values to drop the ankles of the giant towards the ground when computing IK.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.LowerTime">
            <summary>
            How many seconds until the giant reaches the ground.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.LowerCurve">
            <summary>
            The lowering curve type of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.RaiseTime">
            <summary>
            How many seconds until the giant recovers from reaching the ground.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.RaiseCurve">
            <summary>
            The raising curve type of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PauseTimeEasy">
            <summary>
            How many seconds for the giant to wait on "Easy" difficulty.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PauseTimeNormal">
            <summary>
            How many seconds for the giant to wait on "Normal" difficulty.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PauseTimeHeroic">
            <summary>
            How many seconds for the giant to wait on "Heroic" difficulty.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PauseTimeLegendary">
            <summary>
            How many seconds for the giant to wait on "Legendary" difficulty.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.BuckleGravityScale">
            <summary>
            The buckling gravity scale of the giant. Used to control descent when not 0.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.BucklingMarker">
            <summary>
            The marker that shows bottom of the giant and center of search area.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.ForwardRearScan">
            <summary>
            The forward-rear world-unit search distance of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.LeftRightScan">
            <summary>
            The left-right world-unit search distance of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.ForwardRearSteps">
            <summary>
            The number of forward-rear samples per direction of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.LeftRightSteps">
            <summary>
            The number of left-right samples per direction of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PitchBounds">
            <summary>
            The giant may rotate the parent node of the buckling marker this much to align with ground.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.RollBounds">
            <summary>
            The giant may rotate the parent node of the buckling marker this much to align with ground.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.BuckleAnimation">
            <summary>
            The animation to use to lower the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.DescentOverlay">
            <summary>
            The animation to overlay while the giant is lowering.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PauseOverlay">
            <summary>
            The animation to overlay while the giant is paused.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.DescentOverlayScale">
            <summary>
            The maximum blend weight of descent overlay of the giant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.Giant.BuckleSetting.PausedOverlayScale">
            <summary>
            The maximum blend weight of paused overlay of the giant.
            </summary>
        </member>
        <member name="T:BlamCore.TagDefinitions.MultilingualUnicodeStringList">
            <summary>
            Contains a list of localized strings.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.MultilingualUnicodeStringList.Strings">
            <summary>
            The strings in the list.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.MultilingualUnicodeStringList.Data">
            <summary>
            The data block containing every string.
            </summary>
        </member>
        <member name="M:BlamCore.TagDefinitions.MultilingualUnicodeStringList.GetString(BlamCore.TagDefinitions.LocalizedString,BlamCore.Common.GameLanguage)">
            <summary>
            Gets the value of a string in a given language.
            </summary>
            <param name="str">The string.</param>
            <param name="language">The language.</param>
            <returns>The value of the string, or <c>null</c> if the string is not available.</returns>
        </member>
        <member name="M:BlamCore.TagDefinitions.MultilingualUnicodeStringList.SetString(BlamCore.TagDefinitions.LocalizedString,BlamCore.Common.GameLanguage,System.String)">
            <summary>
            Sets the value of a string for a given language.
            </summary>
            <param name="str">The string.</param>
            <param name="language">The language.</param>
            <param name="newValue">The new value. Can be <c>null</c>.</param>
        </member>
        <member name="T:BlamCore.TagDefinitions.LocalizedString">
            <summary>
            A localized string.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.LocalizedString.StringID">
            <summary>
            The string's stringID.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.LocalizedString.StringIDStr">
            <summary>
            The stringID's string value. Can be empty.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.LocalizedString.Offsets">
            <summary>
            The array of offsets for each language.
            If an offset is -1, then the string is not available.
            There must be 12 of these (one offset per language).
            </summary>
        </member>
        <member name="T:BlamCore.TagDefinitions.RenderMethodTemplate.ArgumentMapping">
            <summary>
            Binds an argument in the render method tag to a pixel shader constant.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderMethodTemplate.ArgumentMapping.RegisterIndex">
            <summary>
            The GPU register to bind the argument to.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderMethodTemplate.ArgumentMapping.ArgumentIndex">
            <summary>
            The index of the argument in one of the blocks in the render method tag.
            The block used depends on the argument type.
            </summary>
        </member>
        <member name="T:BlamCore.TagDefinitions.RenderModel.Region">
            <summary>
            A region of a model.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderModel.Region.Name">
            <summary>
            The name of the region as a stringID.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderModel.Region.Permutations">
            <summary>
            The permutations belonging to the region.
            </summary>
        </member>
        <member name="T:BlamCore.TagDefinitions.RenderModel.Region.Permutation">
            <summary>
            A permutation of a region, associating a specific mesh with it.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderModel.Region.Permutation.Name">
            <summary>
            The name of the permutation as a stringID.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderModel.Region.Permutation.MeshIndex">
            <summary>
            The index of the first mesh belonging to the permutation.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.RenderModel.Region.Permutation.MeshCount">
            <summary>
            The number of meshes belonging to the permutation.
            </summary>
        </member>
        <member name="M:BlamCore.TagDefinitions.TagDefinition.Find(BlamCore.Common.Tag)">
            <summary>
            Finds the structure type corresponding to a group tag.
            </summary>
            <param name="groupTag">The group tag of the group to search for.</param>
            <returns>The structure type if found, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.TagDefinitions.TagDefinition.Find(System.String)">
            <summary>
            Finds the structure type corresponding to a group tag.
            </summary>
            <param name="groupTag">The string representation of the group tag of the group to search for.</param>
            <returns>The structure type if found, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.TagDefinitions.TagDefinition.Exists(BlamCore.Common.Tag)">
            <summary>
            Checks to see if a tag definition exists.
            </summary>
            <param name="groupTag">The group tag of the tag definition.</param>
            <returns>true if the tag definition exists.</returns>
        </member>
        <member name="M:BlamCore.TagDefinitions.TagDefinition.Exists(System.String)">
            <summary>
            Checks to see if a tag definition exists.
            </summary>
            <param name="groupTag">The group tag of the tag definition.</param>
            <returns>true if the tag definition exists.</returns>
        </member>
        <member name="T:BlamCore.TagDefinitions.VFilesList">
            <summary>
            Contains a list of vfiles.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.VFilesList.Files">
            <summary>
            The files in the list.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.VFilesList.Data">
            <summary>
            The data block containing the data for every file.
            </summary>
        </member>
        <member name="M:BlamCore.TagDefinitions.VFilesList.Find(System.String)">
            <summary>
            Attempts to find a file by its path.
            </summary>
            <param name="path">The path of the file to find.</param>
            <returns>The file if found, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:BlamCore.TagDefinitions.VFilesList.Extract(BlamCore.TagDefinitions.VFileInfo)">
            <summary>
            Extracts the specified file.
            </summary>
            <param name="file">The file to extract.</param>
            <returns>The file data.</returns>
        </member>
        <member name="M:BlamCore.TagDefinitions.VFilesList.Replace(BlamCore.TagDefinitions.VFileInfo,System.Byte[])">
            <summary>
            Replaces the specified file.
            </summary>
            <param name="file">The file to replace.</param>
            <param name="newData">The data to replace it with.</param>
        </member>
        <member name="M:BlamCore.TagDefinitions.VFilesList.Insert(System.String,System.String,System.Byte[])">
            <summary>
            Adds a new file to the tag.
            </summary>
            <param name="name">The name of the file to add.</param>
            <param name="folder">The folder the file is located in.</param>
            <param name="fileData">The file data.</param>
        </member>
        <member name="M:BlamCore.TagDefinitions.VFilesList.Remove(BlamCore.TagDefinitions.VFileInfo)">
            <summary>
            Removes a file from the tag.
            </summary>
            <param name="file">The file to remove.</param>
        </member>
        <member name="T:BlamCore.TagDefinitions.VFileInfo">
            <summary>
            Contains information about a vfile.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.VFileInfo.Name">
            <summary>
            The name of the file (e.g. "hf2p_weapons_categories.ps").
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.VFileInfo.Folder">
            <summary>
            The folder the file is located in (e.g. "ps\autogen\").
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.VFileInfo.Offset">
            <summary>
            The starting offset of the file from the file data block.
            </summary>
        </member>
        <member name="F:BlamCore.TagDefinitions.VFileInfo.Size">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="T:BlamCore.TagResources.BitmapTextureInteropResource">
            <summary>
            Resource definition data for bitmap textures.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.Texture">
            <summary>
            The texture object.
            </summary>
        </member>
        <member name="T:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition">
            <summary>
            Describes a bitmap.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Data">
            <summary>
            The reference to the bitmap data.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.UnknownData">
            <summary>
            The reference to the unknown data.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Width">
            <summary>
            The bitmap's width in pixels.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Height">
            <summary>
            The bitmap's height in pixels.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Depth">
            <summary>
            The bitmap's depth.
            Only used for <see cref="F:BlamCore.Bitmaps.BitmapType.Texture3D"/> textures.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.MipmapCount">
            <summary>
            The number of mip levels in the bitmap. (1 = full size only)
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Type">
            <summary>
            The bitmap's type.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.D3DFormatUnused">
            <summary>
            The format of the bitmap as a D3DFORMAT enum.
            Note that this is actually unused and the game reads the format from <see cref="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Format"/>.
            Setting this value is still suggested however.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Format">
            <summary>
            The format of the bitmap data.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.BitmapTextureInteropResource.BitmapDefinition.Flags">
            <summary>
            Gets or sets flags describing the bitmap.
            </summary>
        </member>
        <member name="T:BlamCore.TagResources.RenderGeometryApiResourceDefinition">
            <summary>
            Resource definition data for renderable geometry.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.RenderGeometryApiResourceDefinition.VertexBuffers">
            <summary>
            The vertex buffer definitions for the model data.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.RenderGeometryApiResourceDefinition.IndexBuffers">
            <summary>
            The index buffer definitions for the model data.
            </summary>
        </member>
        <member name="T:BlamCore.TagResources.VertexBufferDefinition">
            <summary>
            Defines a vertex buffer in model data.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.VertexBufferDefinition.Count">
            <summary>
            The number of vertices in the buffer.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.VertexBufferDefinition.Format">
            <summary>
            The format of each vertex.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.VertexBufferDefinition.VertexSize">
            <summary>
            The size of each vertex in bytes.
            </summary>
            <remarks>
            This multiplied by <see cref="F:BlamCore.TagResources.VertexBufferDefinition.Count"/> should equal the total buffer size.
            </remarks>
        </member>
        <member name="F:BlamCore.TagResources.VertexBufferDefinition.Data">
            <summary>
            The reference to the the data for the vertex buffer.
            </summary>
        </member>
        <member name="T:BlamCore.TagResources.IndexBufferDefinition">
            <summary>
            Defines an index buffer in model data.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.IndexBufferDefinition.Type">
            <summary>
            The primitive type to use for the index buffer.
            </summary>
        </member>
        <member name="F:BlamCore.TagResources.IndexBufferDefinition.Data">
            <summary>
            The reference to the data for the index buffer.
            </summary>
        </member>
        <member name="T:System.Half">
             <summary>
             Represents a half-precision floating point number. 
             </summary>
             <remarks>
             Note:
                 Half is not fast enought and precision is also very bad, 
                 so is should not be used for matemathical computation (use Single instead).
                 The main advantage of Half type is lower memory cost: two bytes per number. 
                 Half is typically used in graphical applications.
                 
             Note: 
                 All functions, where is used conversion half->float/float->half, 
                 are approx. ten times slower than float->double/double->float, i.e. ~3ns on 2GHz CPU.
            
             References:
                 - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
                 - IEEE 754 revision, link: http://grouper.ieee.org/groups/754/
             </remarks>
        </member>
        <member name="F:System.Half.value">
            <summary>
            Internal representation of the half-precision floating-point number.
            </summary>
        </member>
        <member name="F:System.Half.Epsilon">
            <summary>
            Represents the smallest positive System.Half value greater than zero. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.MaxValue">
            <summary>
            Represents the largest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.MinValue">
            <summary>
            Represents the smallest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.NaN">
            <summary>
            Represents not a number (NaN). This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.NegativeInfinity">
            <summary>
            Represents negative infinity. This field is constant.
            </summary>
        </member>
        <member name="F:System.Half.PositiveInfinity">
            <summary>
            Represents positive infinity. This field is constant.
            </summary>
        </member>
        <member name="M:System.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified single-precision floating-point number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 32-bit signed integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 64-bit signed integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Double)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified double-precision floating-point number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified decimal number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 32-bit unsigned integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 64-bit unsigned integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:System.Half.Negate(System.Half)">
            <summary>
            Returns the result of multiplying the specified System.Half value by negative one.
            </summary>
            <param name="half">A System.Half.</param>
            <returns>A System.Half with the value of half, but the opposite sign. -or- Zero, if half is zero.</returns>
        </member>
        <member name="M:System.Half.Add(System.Half,System.Half)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>A System.Half value that is the sum of half1 and half2.</returns>
        </member>
        <member name="M:System.Half.Subtract(System.Half,System.Half)">
            <summary>
            Subtracts one specified System.Half value from another.
            </summary>
            <param name="half1">A System.Half (the minuend).</param>
            <param name="half2">A System.Half (the subtrahend).</param>
            <returns>The System.Half result of subtracting half2 from half1.</returns>
        </member>
        <member name="M:System.Half.Multiply(System.Half,System.Half)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the multiplicand).</param>
            <param name="half2">A System.Half (the multiplier).</param>
            <returns>A System.Half that is the result of multiplying half1 and half2.</returns>
        </member>
        <member name="M:System.Half.Divide(System.Half,System.Half)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the dividend).</param>
            <param name="half2">A System.Half (the divisor).</param>
            <returns>The System.Half that is the result of dividing half1 by half2.</returns>
            <exception cref="T:System.DivideByZeroException">half2 is zero.</exception>
        </member>
        <member name="M:System.Half.op_UnaryPlus(System.Half)">
            <summary>
            Returns the value of the System.Half operand (the sign of the operand is unchanged).
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of the operand, half.</returns>
        </member>
        <member name="M:System.Half.op_UnaryNegation(System.Half)">
            <summary>
            Negates the value of the specified System.Half operand.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The result of half multiplied by negative one (-1).</returns>
        </member>
        <member name="M:System.Half.op_Increment(System.Half)">
            <summary>
            Increments the System.Half operand by 1.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half incremented by 1.</returns>
        </member>
        <member name="M:System.Half.op_Decrement(System.Half)">
            <summary>
            Decrements the System.Half operand by one.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half decremented by 1.</returns>
        </member>
        <member name="M:System.Half.op_Addition(System.Half,System.Half)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of adding half1 and half2.</returns>
        </member>
        <member name="M:System.Half.op_Subtraction(System.Half,System.Half)">
            <summary>
            Subtracts two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of subtracting half1 and half2.</returns>        
        </member>
        <member name="M:System.Half.op_Multiply(System.Half,System.Half)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of multiplying half1 by half2.</returns>
        </member>
        <member name="M:System.Half.op_Division(System.Half,System.Half)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the dividend).</param>
            <param name="half2">A System.Half (the divisor).</param>
            <returns>The System.Half result of half1 by half2.</returns>
        </member>
        <member name="M:System.Half.op_Equality(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether two instances of System.Half are equal.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 and half2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_Inequality(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether two instances of System.Half are not equal.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 and half2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_LessThan(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is less than half1; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_GreaterThan(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is greater than half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_LessThanOrEqual(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than or equal to another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is less than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_GreaterThanOrEqual(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than or equal to another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is greater than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Byte)~System.Half">
            <summary>
            Converts an 8-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 8-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int16)~System.Half">
            <summary>
            Converts a 16-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>A System.Half that represents the converted 16-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Char)~System.Half">
            <summary>
            Converts a Unicode character to a System.Half.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>A System.Half that represents the converted Unicode character.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int32)~System.Half">
            <summary>
            Converts a 32-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>A System.Half that represents the converted 32-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int64)~System.Half">
            <summary>
            Converts a 64-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>A System.Half that represents the converted 64-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Single)~System.Half">
            <summary>
            Converts a single-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A single-precision floating-point number.</param>
            <returns>A System.Half that represents the converted single-precision floating point number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Double)~System.Half">
            <summary>
            Converts a double-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A double-precision floating-point number.</param>
            <returns>A System.Half that represents the converted double-precision floating point number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Decimal)~System.Half">
            <summary>
            Converts a decimal number to a System.Half.
            </summary>
            <param name="value">decimal number</param>
            <returns>A System.Half that represents the converted decimal number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Byte">
            <summary>
            Converts a System.Half to an 8-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Char">
            <summary>
            Converts a System.Half to a Unicode character.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A Unicode character that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int16">
            <summary>
            Converts a System.Half to a 16-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int32">
            <summary>
            Converts a System.Half to a 32-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int64">
            <summary>
            Converts a System.Half to a 64-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Single">
            <summary>
            Converts a System.Half to a single-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A single-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Double">
            <summary>
            Converts a System.Half to a double-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A double-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Decimal">
            <summary>
            Converts a System.Half to a decimal number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A decimal number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.SByte)~System.Half">
            <summary>
            Converts an 8-bit signed integer to a System.Half.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>A System.Half that represents the converted 8-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt16)~System.Half">
            <summary>
            Converts a 16-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt32)~System.Half">
            <summary>
            Converts a 32-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt64)~System.Half">
            <summary>
            Converts a 64-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 64-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.SByte">
            <summary>
            Converts a System.Half to an 8-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt16">
            <summary>
            Converts a System.Half to a 16-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt32">
            <summary>
            Converts a System.Half to a 32-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt64">
            <summary>
            Converts a System.Half to a 64-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.CompareTo(System.Half)">
            <summary>
            Compares this instance to a specified System.Half object.
            </summary>
            <param name="other">A System.Half object.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:System.Half.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified System.Object.
            </summary>
            <param name="obj">An System.Object or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater
            than value. -or- value is null.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a System.Half</exception>
        </member>
        <member name="M:System.Half.Equals(System.Half)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Half object represent the same value.
            </summary>
            <param name="other">A System.Half object to compare to this instance.</param>
            <returns>true if value is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Object
            represent the same type and value.
            </summary>
            <param name="obj">An System.Object.</param>
            <returns>true if value is a System.Half and equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Half.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type System.Half.
            </summary>
            <returns>The enumerated constant (TypeCode)255.</returns>
        </member>
        <member name="M:System.Half.GetBytes(System.Half)">
            <summary>
            Returns the specified half-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.Half.GetBits(System.Half)">
            <summary>
            Converts the value of a specified instance of System.Half to its equivalent binary representation.
            </summary>
            <param name="value">A System.Half value.</param>
            <returns>A 16-bit unsigned integer that contain the binary representation of value.</returns>        
        </member>
        <member name="M:System.Half.ToHalf(System.Byte[],System.Int32)">
            <summary>
            Returns a half-precision floating point number converted from two bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A half-precision floating point number formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentException">
            startIndex is greater than or equal to the length of value minus 1, and is
            less than or equal to the length of value minus 1.
            </exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:System.Half.ToHalf(System.UInt16)">
            <summary>
            Returns a half-precision floating point number converted from its binary representation.
            </summary>
            <param name="bits">Binary representation of System.Half value</param>
            <returns>A half-precision floating point number formed by its binary representation.</returns>
        </member>
        <member name="M:System.Half.Sign(System.Half)">
            <summary>
            Returns a value indicating the sign of a half-precision floating-point number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
            A number indicating the sign of value. Number Description -1 value is less
            than zero. 0 value is equal to zero. 1 value is greater than zero.
            </returns>
            <exception cref="T:System.ArithmeticException">value is equal to System.Half.NaN.</exception>
        </member>
        <member name="M:System.Half.Abs(System.Half)">
            <summary>
            Returns the absolute value of a half-precision floating-point number.
            </summary>
            <param name="value">A number in the range System.Half.MinValue ≤ value ≤ System.Half.MaxValue.</param>
            <returns>A half-precision floating-point number, x, such that 0 ≤ x ≤System.Half.MaxValue.</returns>
        </member>
        <member name="M:System.Half.Max(System.Half,System.Half)">
            <summary>
            Returns the larger of two half-precision floating-point numbers.
            </summary>
            <param name="value1">The first of two half-precision floating-point numbers to compare.</param>
            <param name="value2">The second of two half-precision floating-point numbers to compare.</param>
            <returns>
            Parameter value1 or value2, whichever is larger. If value1, or value2, or both val1
            and value2 are equal to System.Half.NaN, System.Half.NaN is returned.
            </returns>
        </member>
        <member name="M:System.Half.Min(System.Half,System.Half)">
            <summary>
            Returns the smaller of two half-precision floating-point numbers.
            </summary>
            <param name="value1">The first of two half-precision floating-point numbers to compare.</param>
            <param name="value2">The second of two half-precision floating-point numbers to compare.</param>
            <returns>
            Parameter value1 or value2, whichever is smaller. If value1, or value2, or both val1
            and value2 are equal to System.Half.NaN, System.Half.NaN is returned.
            </returns>
        </member>
        <member name="M:System.Half.IsNaN(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to not a number (System.Half.NaN).
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if value evaluates to not a number (System.Half.NaN); otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity or System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsNegativeInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsPositiveInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <returns>The System.Half number equivalent to the number contained in value.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent 
            using the specified culture-specific format information.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific parsing information about value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is
            System.Globalization.NumberStyles.Number.
            </param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent 
            using the specified style and culture-specific format.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is 
            System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific information about the format of value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style and provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Half@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not a number in a valid format, or represents a number less than System.Half.MinValue
            or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Half@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent
            using the specified style and culture-specific format. A return value indicates
            whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the permitted format of value. A typical value to specify is System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific parsing information about value.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than
            System.Half.MinValue or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style 
            is the System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
        </member>
        <member name="M:System.Half.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the value of this instance.</returns>
        </member>
        <member name="M:System.Half.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by provider.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation 
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by format and provider.</returns>
            <exception cref="T:System.FormatException">format is invalid.</exception>
        </member>
        <member name="T:System.HalfHelper">
            <summary>
            Helper class for Half conversions and some low level operations.
            This class is internally used in the Half class.
            </summary>
            <remarks>
            References:
                - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
            </remarks>
        </member>
    </members>
</doc>
