import ssl.lib.ui.ui_widget_container
import ssl.hf2p.engine_ctrl
import ssl.hf2p.ui_globals
import ssl.hf2p.ui_ingame
import ui.hf2p_SlidingScreens.hf2p_challenges_screen.hf2p_challengeProgressPopup
import ui.libs.hf2p_ChallengesScreen_lib.hf2p_ChallengesScreen_lib

class UiPreGameScreen : UiWidgetContainer

var isSubscribed : bool = false


func onLoadoutSelected(p: params): bool
   //SetStateName("Waiting")

   return true
end

func loadoutChoiceClickPregame(p: params): bool
   if (GetStateName() == "Waiting")
      SetStateName("Loadout")
   end

   return true
end

handle OnEnteringState("Initial")
   Widgets().waitingInfo.visible       := false
   Widgets().scoreboardScreen.SetStateName("Initial")
   Widgets().scoreboardScreen.visible  := false
   Widgets().loadoutScreen.visible     := false
   Props().visible                     := false
end

handle OnEnteringState("WaitingForPlayers") 
   Widgets().scoreboardScreen.visible := true
   Widgets().scoreboardScreen.SetStateName("PreGameVisible")
   Widgets().waitingInfo.visible := true
end

handle OnExitState("WaitingForPlayers")
   Widgets().scoreboardScreen.visible := false
   Widgets().scoreboardScreen.SetStateName("Initial")
   Widgets().waitingInfo.visible := false
end

func GetTeamIdx() : int
   return (int)$UiIngame.team_index.Get()
   //return $uiEnums.PLAYER_TEAM_GREEN
end

handle OnEnteringState("GameMode") 
   //Broken and removed in 0.6 anyway.
   Widgets().gameMode.visible := false     
end

handle OnEnterState("GameMode") 
   var local_team : int    = GetTeamIdx()
   var teamMode   : bool   = local_team > $uiEnums.PLAYER_TEAM_NONE
   if (teamMode)
      SetStateName("Team") : 5
   end
end

handle OnExitState("GameMode")
   Widgets().gameMode.visible := false
   Widgets().gameMode.container.gameModeAttach.visible := false
end

handle OnEnteringState("Team")          
   var local_team : int = GetTeamIdx()

   //YOU ARE ON THE X TEAM text for the new teams.
   if (local_team == $uiEnums.PLAYER_TEAM_NONE)
      Widgets().localTeam.bckg.bg.SetStateName("observer")
      Widgets().localTeam.text    := "ingame_team_notice_observer"
   elif (local_team == $uiEnums.PLAYER_TEAM_RED)
      Widgets().localTeam.bckg.bg.SetStateName("red")
      Widgets().localTeam.text    := "ingame_team_notice_red"
   elif (local_team == $uiEnums.PLAYER_TEAM_BLUE)
      Widgets().localTeam.bckg.bg.SetStateName("blue")
      Widgets().localTeam.text    := "ingame_team_notice_blue"
   elif (local_team == $uiEnums.PLAYER_TEAM_GREEN)
      Widgets().localTeam.bckg.bg.SetStateName("green")
      Widgets().localTeam.text    := "ingame_team_notice_green"
   elif (local_team == $uiEnums.PLAYER_TEAM_ORANGE)
      Widgets().localTeam.bckg.bg.SetStateName("orange")
      Widgets().localTeam.text    := "ingame_team_notice_orange"
   elif (local_team == $uiEnums.PLAYER_TEAM_PURPLE)
      Widgets().localTeam.bckg.bg.SetStateName("purple")
      Widgets().localTeam.text    := "ingame_team_notice_purple"
   elif (local_team == $uiEnums.PLAYER_TEAM_GOLD)
      Widgets().localTeam.bckg.bg.SetStateName("gold")
      Widgets().localTeam.text    := "ingame_team_notice_gold"
   elif (local_team == $uiEnums.PLAYER_TEAM_BROWN)
      Widgets().localTeam.bckg.bg.SetStateName("brown")
      Widgets().localTeam.text    := "ingame_team_notice_brown"
   elif (local_team == $uiEnums.PLAYER_TEAM_PINK)
      Widgets().localTeam.bckg.bg.SetStateName("pink")
      Widgets().localTeam.text    := "ingame_team_notice_pink"
   end
   Widgets().localTeam.visible := true
end

handle OnExitState("Team")
   Widgets().localTeam.visible := false
end

handle OnEnteringState("Waiting")          
   Widgets().choiceLoadoutBtnPregame.visible := false //true
   Widgets().loadoutScreen.visible := true
end

handle OnLeavingState("Waiting")
   Widgets().choiceLoadoutBtnPregame.visible := false
   Widgets().loadoutScreen.visible := false
end
end

class UiPreGameScreenVM
   var wgt              : UiWidget           = null
   var isTimerVisible   : ObservableProperty = $OM.Property(false)
   
   var upcomingChallenges : UpcomingChallengesVM = null

   func Init(p : params)
      wgt := p.widget 
      $UiIngame.state.Subscribe(this, "UpdatePregameState")
      upcomingChallenges := new UpcomingChallengesVM()
      UpdatePregameState()
   end
   
   func Term()
      upcomingChallenges := null
      $UiIngame.state.Unsubscribe(this, "UpdatePregameState")      
   end
   
   func GetTimeLeftInt() : int
      var timerVal   : int    = (int)$UiIngame.state_timer.Get()
      var ret        : int    = 0
      if (timerVal >= 0)
         ret := timerVal
         $root.playSound("mp_timer")
      end
      return ret
   end   

   func GetTimeLeft() : string
      var ret : string = (string)GetTimeLeftInt()
      return ret
   end
   
   func IsTimerVisible() : bool
      var ret : bool = (bool)isTimerVisible.Get() and GetTimeLeftInt() != 0
      return ret
   end
   
   func UpdatePregameState()
      var pregameStat : int = (int)$UiIngame.state.Get()
      if (wgt != null)
         var newState            : string = "Initial"
         var isTimerVisibleSet   : bool   = false
         if (pregameStat == $uiEnums.INGAME_STATE_NONE)
            Log("ui~hf2p_pregame", "pregame_state_NONE")
            newState := "Initial"
         elif (pregameStat == $uiEnums.INGAME_STATE_WAITING_FOR_PLAYERS)
            Log("ui~hf2p_pregame", "pregame_state_WAITING_PLAYERS")
            newState := "WaitingForPlayers"
            upcomingChallenges.challengesState.Set("hidden")
         elif (pregameStat == $uiEnums.INGAME_STATE_MATCH_INTRODUCTION)
            Log("ui~hf2p_pregame", "pregame_state_MATCH_INTRO")
            isTimerVisibleSet := true
            newState := "GameMode"
            upcomingChallenges.challengesState.Set("fadeIn")
         elif (pregameStat == $uiEnums.INGAME_STATE_LOADOUT_SELECTION_INITIAL)
            Log("ui~hf2p_pregame", "pregame_state_LOADOUT")
            isTimerVisibleSet := true
            newState := "Loadout"
            upcomingChallenges.challengesState.Set("fadeOut")
         elif (pregameStat == $uiEnums.INGAME_STATE_HUD)
            Log("ui~hf2p_pregame", "pregame_state_HUD")
            newState := "Initial"
            upcomingChallenges.challengesState.Set("hidden")
         else
            Log("ui~hf2p_pregame", "pregame_state_INITAL")
            newState := "Initial"
            upcomingChallenges.challengesState.Set("hidden")
         end
         isTimerVisible.Set(isTimerVisibleSet)
         wgt.SetStateName(newState)
      end
   end
   
end

class UpcomingChallengesVM
   var upcomingChallenges : ObservableProperty = $OM.Calculated(this, "GetUpcomingChallenges")
   var challengesState  : ObservableProperty = $OM.Property("hidden")

   func GetUpcomingChallenges() : vector
      var ret : vector
      var items : vector
      var challenges : vector
      var ud : UserData = (UserData)$UserDataStorage.users.Get($UserDataStorage.local_user.uid.Get())
      var i : int
      for i := 0 to (int)$UserDataStorage.local_user.weapon_loadouts_unlocked.Get() - 1
         var wl : UD_WeaponLoadout = ud.weapon_loadouts.spartan.loadouts.Get().Get(i)
         items.Push(wl.primary_weapon.Get())
         items.Push(wl.secondary_weapon.Get())
         items.Push(wl.grenades.Get())
         items.Push(wl.consumable_first.Get())
         items.Push(wl.consumable_second.Get())
         items.Push(wl.consumable_third.Get())
         items.Push(wl.consumable_fourth.Get())
         items.Push(wl.booster.Get())
      end
      for i := 0 to (int)$UserDataStorage.local_user.armor_loadouts_unlocked.Get() - 1
         var al : UD_ArmorLoadout = ud.armor_loadouts.spartan.loadouts.Get().Get(i)
         items.Push(al.head_armor.Get())
         items.Push(al.shoulders_armor.Get())
         items.Push(al.torso_armor.Get())
         items.Push(al.hands_armor.Get())
         items.Push(al.legs_armor.Get())
      end
      for i := 0 to items.Count() - 1
         if items.Get(i) == ""
            continue
         end
         var compShop : GL_ComponentShop = (GL_ComponentShop)$UiGlobals.componentsShop.Get(items.Get(i))
         var techId : string = (string)compShop.requirement.Get()
         var compItem : GL_ComponentItem = (GL_ComponentItem)$UiGlobals.componentsItem.Get(techId)
         var challengeId : string = compItem.GetNextChallengeId()
         if $UiGlobals.componentsChallenge.Exist(challengeId)
            var p : params
            p.itemId := techId
            p.challengeId := challengeId
            p.rank := compItem.GetNextChallengeRank()
            p.compChallenge := $UiGlobals.componentsChallenge.Get(challengeId)
            challenges.Push(p)
         end
      end
      var j : int
      for i := 0 to challenges.Count() - 1
         for j := i + 1 to challenges.Count() - 1
            var progress1 : float = (float)challenges.Get(i).compChallenge.progress.Get()
            var progress2 : float = (float)challenges.Get(j).compChallenge.progress.Get()
            if progress1 < progress2
               var tmp : * = challenges.Get(i)
               challenges.Set(i, challenges.Get(j))
               challenges.Set(j, tmp)
            end
         end
      end
      for i := 0 to challenges.Count() - 1
         var exists = false
         for j := 0 to ret.Count() - 1
            if ret.Get(j).challengeId == challenges.Get(i).challengeId
               exists := true
               break
            end
         end
         if exists
            continue
         end
         var progress : float = (float)challenges.Get(i).compChallenge.progress.Get()
         if ret.Count() >= 3
            break
         end
         if progress < 1.0 and ret.Count() < 3
            ret.Push(challenges.Get(i))
         end
      end
      for i := 0 to ret.Count() / 2 - 1
         var tmp : * = ret.Get(i)
         ret.Set(i, ret.Get(ret.Count() - i - 1))
         ret.Set(ret.Count() - i - 1, tmp)
      end
      return ret
   end
   
   func GetUpcomingChallenge(idx : int) : *
      if upcomingChallenges.Get().Count() > idx
         return upcomingChallenges.Get().Get(idx)
      end
      return null
   end
   
   func GetUpcomingChallengeCount() : int
      var ret : int = (int)upcomingChallenges.Get().Count()
      if ret > 3
         ret := 3
      end
      return ret
   end
   
   global event uiDbgKey4()
      challengesState.Set("fadeIn")
   end
   
   global event uiDbgKey5()
      challengesState.Set("fadeOut")
   end
end

class PregameChallengeVM : ChallengeProgressVM
   
   func Init(p : params)
      if IsValid(p.challenge) and IsValid(p.challenge.itemId)
         InitVM(p.challenge.itemId, p.challenge.challengeId, p.challenge.rank)
      else
         InitVM("", "", -1)
      end
   end
   
end

class PregameChallenge : UiWidgetContainer
   
   handle OnEnterState("Initial")
      var a = 0
      a := 1
      a := 2
   end

   handle OnEnterState("Waiting")                  
   end
   
   handle OnEnteringState("AnimIn")
   end

   handle OnEnterState("AnimIn")                  
   end

   handle OnEnterState("AnimOut")
   end
   
end